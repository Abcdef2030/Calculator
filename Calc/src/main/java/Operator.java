import static java.lang.System.out;
import java.util.List;
import java.util.LinkedList;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import java.util.function.Consumer;
import java.util.regex.Pattern;
import java.util.regex.Matcher;



public abstract class Operator implements Operation
{
	protected String result = null;  // Этот элемент описывает результат арифметической операции
	protected StringBuilder oper_text = null;  // Этот элемент содержит текст, описывающий выполненное простое арифметическое выражение
	protected Operation operation = null;  // Этот элемент необходим для определения некоторых из ниже объявленных классов, при выполнении стандартных процедур
	private static ArithmeticTable system_numeration = null;
	private static String step = null;
	static final ArithmeticTable test_system = new ArithmeticTable ( 10, 10 );
	static int mistakes = 0;  // Это значение отностися к тестированию
	
    static String alterBoolValue ( String number, ArithmeticTable system_numeration ) throws IllegalArgumentException  // Действие этой функции относятся к булево значениям, в числовом выражениях – ноль или один, в текстовом представлении. То есть в случае аргумент из себя представляет иное число, возникает исключение
    {
        if ( ! number.equals ( system_numeration.ZERO )  &&  ! number.equals ( system_numeration.ONE ) )  throw new IllegalArgumentException ( );
        int index = system_numeration.symbol_map.get ( number );
        String symbol = null;
        try { symbol = system_numeration.getSymbol ( index - 1 ); }  catch ( ArrayIndexOutOfBoundsException ex )  { symbol = system_numeration.getSymbol ( index + 1 ); }
        return symbol;
    }
	
//	void outputResult ( boolean print_calling )  { if ( print_calling )  out.println ( ( this.oper_text + this.result + "\u001B[0m" ).toString ( ).replaceAll ( SystemNumeration.REST, "rest" ).replaceAll ( SystemNumeration.MINUS, "-" ).replaceAll ( SystemNumeration.PLUS, "+" ) ); }  // Действием этой функции выполняется вывод вычисленного результата данного арифметического выражения, в случае третий параметр имеет положительную булево значение
	void outputResult ( boolean print_calling )  { if ( print_calling )  out.println ( ( this.oper_text + this.result + "\u001B[0m" ).toString ( ).replaceAll ( SystemNumeration.REST, "rest" ).replaceAll ( SystemNumeration.MINUS, "-" ).replaceAll ( SystemNumeration.PLUS, "+" ) ); }  // Действием этой функции выполняется вывод вычисленного результата данного арифметического выражения, в случае третий параметр имеет положительную булево значение
	
	void makeResultExpression ( String number_1, String number_2, boolean print_calling )  { this.oper_text = new StringBuilder ( Colors.AZURE ).append ( this.getClass ( ).getName ( ) ).append ( " :: " ).append ( number_1.concat ( " \u001B[33m " ) ).append ( this.getKey ( ) ).append ( " \u001B[36m " ).append ( number_2.concat ( " \u001B[33m = " ) ); }
//	void makeResultExpression ( String number_1, String number_2, boolean print_calling )  { this.oper_text = new StringBuilder ( this.getClass ( ).getName ( ) ).append ( " :: " ).append ( number_1 ).append ( this.getKey ( ) ).append ( number_2.concat ( " = " ) ); }
	
	static String getIntegerDivideResult ( String number_1, String number_2, ArithmeticTable system_numeration )  // Это функция необходимо предварительного настроя данной системы счисления на то, что бы результат операции деления был вычислен без дробной части, после чего эту систему счисления перенастроить таким, каким была до выполнения операции деления. Возвращает результат подобного деления
	{
		int old_cipher_count = system_numeration.getCiphersCount ( );
		system_numeration.setCiphersCount ( 0 );
		String result = Operation.divide.arithmeticOperation ( number_1, number_2, system_numeration, false );
		system_numeration.setCiphersCount ( old_cipher_count );
		return result;
	}

	static Stream<String> endlessStream ( String start, String step, ArithmeticTable system_numeration )
	{
		Operator.system_numeration = system_numeration;
		Operator.step = step;
		
		return Stream.iterate ( start, UnaryOperatorEndless.identity ( ) );
	}
	
	private interface UnaryOperatorEndless extends UnaryOperator  { static UnaryOperatorEndless identity ( )  { return t -> Operation.summary.arithmeticOperation ( (String)t, Operator.step, Operator.system_numeration, false ); } }
	
	private static String [ ] addZeros ( String [ ] str_array_1, String [ ] str_array_2, ArithmeticTable system_numeration ) throws ArrayIndexOutOfBoundsException  // Параметры этой функции описывают оба числа, результат сравнения которых будет вычислен действием иной функции в виде - соответственно - двух текстовых массивов с трех элементов каждый из них – целая часть данного числа, знак степени десяточной части и значение степени десяточной части. По действию этой функции целая часть первого числа модернизируется – с ее конца добавляются нулевые цифра в количестве, соответствующее разнице степеней их десяточных частей, с целью за тем выполнить процедуру по сравнению этих целых частей
	{
		try 
		{
			Operation operation = Operation.subtract;  // По этому элементу будет определено количество добавляемых с конца целой части одной первого числа нулевых цифр – в случае знаки степеней десяточных частей обеих чисел одинаковые, это количество будет вычислено путем вычитания со степени десяточной части первого числа степень десяточной части второго числа, а в случае знаки этих степеней разные, с это количество будет вычислено путем сложения значений степеней десяточных частей обеих чисел
			if ( ! str_array_1 [ 1 ].equals ( str_array_2 [ 1 ] ) )  operation = Operation.summary;
			String ten_pow_difference = operation.arithmeticOperation ( str_array_1 [ 2 ], str_array_2 [ 2 ], system_numeration, false );
				
			// Это есть процедура выполнения добавления конечных нулевых цифр с конца целой части одного из чисел, учитывая все возможные комбинации знаков степеней десяточных частей обеих чисел
			if ( str_array_1 [ 1 ].equals ( SystemNumeration.DEGREE )  &&  str_array_2 [ 1 ].equals ( SystemNumeration.DEGREE ) )
			{
				if ( SystemNumeration.isNegative ( ten_pow_difference ) )  str_array_2 [ 0 ] = Operation.addZeros ( str_array_2 [ 0 ], ten_pow_difference.replaceFirst ( SystemNumeration.MINUS, "" ), system_numeration );
				else  str_array_1 [ 0 ] = Operation.addZeros ( str_array_1 [ 0 ], ten_pow_difference, system_numeration );
			}
			else if ( str_array_1 [ 1 ].equals ( SystemNumeration.DEGREE )  &&  str_array_2 [ 1 ].equals ( SystemNumeration.DEGREE_NEGATIVE ) )  str_array_1 [ 0 ] = Operation.addZeros ( str_array_1 [ 0 ], ten_pow_difference, system_numeration );
			else if ( str_array_1 [ 1 ].equals ( SystemNumeration.DEGREE_NEGATIVE )  &&  str_array_2 [ 1 ].equals ( SystemNumeration.DEGREE ) )  str_array_2 [ 0 ] = Operation.addZeros ( str_array_2 [ 0 ], ten_pow_difference, system_numeration );
			else if ( str_array_1 [ 1 ].equals ( SystemNumeration.DEGREE_NEGATIVE )  &&  str_array_2 [ 1 ].equals ( SystemNumeration.DEGREE_NEGATIVE ) )
			{
				if ( SystemNumeration.isNegative ( ten_pow_difference ) )  str_array_1 [ 0 ] = Operation.addZeros ( str_array_1 [ 0 ], ten_pow_difference.replaceFirst ( SystemNumeration.MINUS, "" ), system_numeration );
				else  str_array_2 [ 0 ] = Operation.addZeros ( str_array_2 [ 0 ], ten_pow_difference, system_numeration );
			}		
			
			return new String [ ] { str_array_1 [ 0 ], str_array_2 [ 0 ] };  // Этот возвращаемый массив составлен с целых частей обеих чисел, один из которых по исполнению этой функции уже модернизирован			
		}
		catch ( ArrayIndexOutOfBoundsException ex )  { throw new ArrayIndexOutOfBoundsException ( Colors.RED + "E X C E P T I O N -- The argument-massive of the function " + Colors.WHITE + "'SystemNumeration :: addZeros ( " + Colors.YELLOW + "str_array_1, str_array_2" + Colors.WHITE + " )'" + Colors.RED + " has  L E S S  elements then count of three  " + Colors.NOCOLOR ); }
	}
	
	static int compareNumbersWithPointAndTenPow ( String number_1, String number_2, boolean by_module, ArithmeticTable system_numeration ) throws NullPointerException
	{
		int difference = 0;  // Это есть разница между составными цифрами обеих чисел под одинаковыми индексами, которые при чтении этих чисел с лево на право первыми выявляются в качестве НЕ ровными цифрами
		// Изначально выясняется знак обеих чисел ( положительное или отрицательное ), что бы с целью вычисления результата их сравнения предварительно избавится от начальных составных знаковых символов ( плюс или минус )
		Boolean is_negative_1, is_negative_2 = null;
		try { is_negative_1 = SystemNumeration.isNegative ( number_1 );  is_negative_2 = SystemNumeration.isNegative ( number_2 ); }  catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + "E X C E P T I O N -- The argument of the function " + Colors.WHITE + "'Operator :: compareNumbersWithPointAndTenPow ( " + Colors.YELLOW + number_1 + ", " + number_2 + Colors.WHITE + " )'" + Colors.RED + " is  N U L L  " + Colors.NOCOLOR ); }
		
		// Это процедура вычисления результата сравнения обеих чисел по ихним знакам, если эти знаки отличаются 
		if ( is_negative_1 != is_negative_2 )  return ( is_negative_1 ? -1 : 1 );

		number_1 = number_1.replaceFirst ( SystemNumeration.MINUS, "" );  number_1 = number_1.replaceFirst ( SystemNumeration.PLUS, "" );  number_2 = number_2.replaceFirst ( SystemNumeration.MINUS, "" );  number_2 = number_2.replaceFirst ( SystemNumeration.PLUS, "" );  // Это процедура избавления от начальных знаковых символов обеих чисел
		number_1 = Operation.makePowByTenFromPoint ( number_1, system_numeration );  number_2 = Operation.makePowByTenFromPoint ( number_2, system_numeration );  // Это процедура избавления от дробных составных символов обеих чисел ( если лни имеются )
		
		// Это процедура выравнивания степеней десяточных частей обеих чисел, с соответствующими изменениями  состава одного из них – с конца целой части числа, у которой имеется наибольшая степень десяточной части, добавляются нулевые цифры в соответствующем количестве, с предварительным сокращением ее степени десяточной части 
		String [ ] str_array_1 = Operation.getAllParts ( number_1, system_numeration );   String [ ] str_array_2 = Operation.getAllParts ( number_2, system_numeration );

		String [ ] str_array = Operator.addZeros ( str_array_1, str_array_2, system_numeration );
		
		difference = system_numeration.compareNumbers ( str_array [ 0 ], str_array [ 1 ] );
		
		if ( by_module )  return difference;  else return ( ! is_negative_1 ? difference : ( difference * -1 ) );
	}
}


//--- Д Л Я   В Ы П О Л Н Е Н И Я   П Р О С Т Е Й Ш И Х   А Р И Ф М Е Т И Ч Е С К И Х   О П Е Р А Ц И Й ---
class Factorial extends Operator
{
	private String result = null;
	private WheelInterface counter = null;
	private ArithmeticTable system_numeration = null;
	static Operator test_operator = new Factorial ( );

	@Override
	public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException, IllegalStateException
	{
		try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			this.result = system_numeration.ONE;
			this.counter = new Counter ( number_1, system_numeration );
			this.counter.statementUp ( );
			this.system_numeration = system_numeration;
			try { Operator.endlessStream ( this.result, system_numeration.ONE, system_numeration ).takeWhile ( value -> { return ! this.counter.statementDown ( ).isZero ( ); } ).forEach ( value -> { this.result = Operation.multiply.arithmeticOperation ( this.result, value, this.system_numeration, false ); } ); }  catch ( IllegalStateException ex )  { throw new IllegalStateException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ] + "\n" + "E X C E P T I O N -- When calling the function " + Colors.WHITE + "'Factorial :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
			this.outputResult ( print_calling );				
			return this.result;		  
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'Factorial :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
	}

	@Override
	public void testingClass ( )
	{
		if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5", "0", Operator.test_system, true ).equals ( "120" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0", "5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
	}
}

class Root extends Operator 
{ 
	private Multipliers for_multipliers = null;  // Этот элемент необходим для вычисления множителей корневой степени его методом, то есть его методом значение степени корня разбивается на множители, и операция корня выполняется для каждого множителя отдельно
	private List<String> list_multipliers = null;  // Это есть коллекция множителей значения степени корня
	private String approx_number = null;
	private class Multipliers 
	{
		private ArithmeticTable system_numeration;
		private String border_value = null;  // Это число описывает предыдущую грань таблицы простых чисел, с целью дополнить эту таблицу начиная с этой предыдущей грани
		private ArithmeticCounter counter = null;  // Этот элемент-счетчик будет участвовать в арифметических операциях - в основном в итеративных действиях в определенном по его показанию количестве
		private List<String> prime_list = new ArrayList ( );  // Это просто коллекция простых чисел до той грани
		private Iterator<String> iter = null;

		//--- C O N S T U C T O R S --- 
		
		Multipliers ( ArithmeticTable system_numeration )
		{
			this.system_numeration = system_numeration;
			this.border_value = system_numeration.TWO;  
			this.counter = new ArithmeticCounter ( system_numeration );  
			if ( prime_list.isEmpty ( ) )  prime_list.add ( system_numeration.TWO );
		}
		//-----------------------
		
		//--- S E T T E R S ---

		boolean supplementPrimeList ( String number )  // Этот параметр описывает грань таблицы простых чисел.  Первое неоспоримое простое число – два – изначально вносится в коллекцию. А остальные составные элементы этой коллекции добавляются по следующей логике: если очередное число НЕ делится ни на одной из имеющийся в коллекции числа, то это «очередное» число считается очередным простым числом.  Возвращаемое значение относится к тому, что простые числа до указанного аргументом значения уже вычислены и внесены в коллекцию ‘prime_list’
		{
			if ( this.system_numeration.compareNumbers ( this.border_value, number ) >= 0 )  return true;

			this.counter.setStatement ( this.border_value );
			this.counter.statementUp ( );
			String half = Operation.divide.arithmeticOperation ( this.counter.toString ( ), this.system_numeration.TWO, this.system_numeration, false );
			while ( this.system_numeration.compareNumbers ( this.border_value, number ) < 0 )
			{
				this.iter = this.prime_list.listIterator ( );
				String current_divisor = iter.next ( );
				try { while ( ! Operation.rest.arithmeticOperation ( this.counter.toString ( ), current_divisor, this.system_numeration, false ).equals ( this.system_numeration.ZERO ) )  { if ( this.system_numeration.compareNumbers ( current_divisor, half ) > 0 )  throw new NoSuchElementException ( );  current_divisor = iter.next ( ); } }  catch ( NoSuchElementException ex )  { this.prime_list.add ( this.counter.toString ( ) ); }  finally { this.counter.statementUp ( );  half = Operation.divide.arithmeticOperation ( this.counter.toString ( ), this.system_numeration.TWO, this.system_numeration, false ); }
				this.border_value = Operation.summary.arithmeticOperation ( this.border_value, this.system_numeration.ONE, this.system_numeration, false );
			}
			return false;  // То есть простые числа до указанного значения НЕ были вычислены до вызова этой функции
		}
		
		List<String> getMultiplyers ( String number )  // При работе этой функции простые числа вычисляются с помощью той теории, при которой требуется, что бы система счисления была десятеричная, то есть при выполнении этой функции для предварительного заполнения листа простых чисел вызывается функция ‘supplementPrimeList ( String )’
		{
			List<String> list = new ArrayList ( );
			this.supplementPrimeList ( number );
			Iterator<String> list_iter = this.prime_list.listIterator ( );
			String divisor = list_iter.next ( );
			try
			{
				while ( true )
				{
					while ( Operation.rest.arithmeticOperation ( number, divisor, this.system_numeration, false ).equals ( this.system_numeration.ZERO ) )  
					{
						list.add ( divisor );
						number = Operation.divide.arithmeticOperation ( number, divisor, this.system_numeration, false );
						if ( number.equals ( this.system_numeration.ONE ) )  return list;
					}	
					divisor = list_iter.next ( );
				}
			}
			catch ( NoSuchElementException ex ) { }
			return null;
		}
	}; 
	
	@Override	
	public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws ArithmeticException, NullPointerException
	{   
		if ( system_numeration.isZero ( number_1 ) )  throw new ArithmeticException ( Colors.RED + "A R I T H M E T I C  E X C E P T I O N -- The first argument of the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'" + Colors.RED + " is  Z E R O  " + Colors.NOCOLOR );
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			if ( system_numeration.isZero ( number_2 ) )  this.result = system_numeration.ZERO;
			else
			{
				if ( system_numeration.isZero ( number_2 ) )  { this.result = system_numeration.ZERO;   if ( print_calling )  this.outputResult ( print_calling );  return this.result; }
				this.result = number_2;
				if ( ! number_1.equals ( system_numeration.ONE ) )  // По скольку операция корня выполняется со степенью простых чисел, являющийся множителями данной по первому параметру числу, а единица НЕ считается простым числом, в смысле – НЕ окажется среди вычисленных простых чисел-множителей, и еще корень от числа в единичной степени ровен этому же числу, то во избежание ошибки и излишней затратности случае единичной степени обходится
				{
					if ( this.for_multipliers == null )  this.for_multipliers = new Multipliers ( system_numeration );
					this.list_multipliers = this.for_multipliers.getMultiplyers ( number_1 );
					Iterator<String> iter = this.list_multipliers.iterator ( );

					try 
					{
						while ( this.result.indexOf ( SystemNumeration.DEGREE_NEGATIVE ) == -1 )  this.result = this.lessRootOperation ( iter.next ( ), this.result, system_numeration );				
						while ( true )  this.result = Operation.root_dn.arithmeticOperation ( iter.next ( ), this.result, system_numeration, true );
					}
					catch ( NoSuchElementException ex ) { }
				}				
			}
				
			if ( print_calling )  this.outputResult ( print_calling ); 
			return this.result; 		 
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
	}  
	// Это функция необходима для избежание бесконечной рекурсии при вызове функции 'arithmeticOperation ( ... )' описания класса 'Root_DN' - дело в том, что при исполнении функции 'arithmeticOperation ( ... )' описания класса 'Root' многократно вызывается функция 'arithmeticOperation ( ... )' описания класса 'Root_DN', а при исполнении функции 'arithmeticOperation ( ... )' описания класса 'Root_DN' вызывается функция 'arithmeticOperation ( ... )' описания класса 'Root' из возникает бесконечная рекурсия. А в случае вызова функции 'lessRootOperation ( ... )' при исполнении функции функции 'arithmeticOperation ( ... )' описания класса 'Root_DN' подобной бесконечной рекурсии НЕ возникает
	public String lessRootOperation ( String number_1, String number_2, ArithmeticTable system_numeration ) throws NullPointerException, ArithmeticException  // Для подсчета корня в области арифметики применяется некая процедура: допустим данный корень есть квадратный. Не имеется понимание о том, хотя бы примерно чему ровен корень данного числа. Процедура состоит в следующем: данное корневое выражение понимаем в квадрат с целью полученное выражение состояло сданного числа, имеющийся до этого под знаком квадратного корня, и это число будет больше иного числа, которое меньше данного числа на единицу.  Это «иное» число всякий раз будет уменьшено с целью в конце концов получить некое «иное» число, квадрат которого меньше данного числа, и квадрат увеличенного этого «иного» числа на единицу больше данного числа.   Это будет означать, что это «иное» число ближе к квадратному корню данного числа, и точнее квадратного корня данного числа можно будет получить по маленькому увеличивая это «иное» число.   Уменьшение этого «иного» числа так же есть процедура – единственное понимание о том «ближе» числе то, что умножая ее на себя получится число больше числа, полученное в результате сложения ее на себя же. По этому процедура уменьшения есть – делить то «иное» число на два, в смысле на первый операнд корневого оператора, что есть второй параметр этой функции
	{  
		try 
		{
			if ( system_numeration.isZero ( number_1 ) )  throw new ArithmeticException ( Colors.RED + "A R I T H M E T I C  E X C E P T I O N -- The first argument of the function " + Colors.WHITE + "'Root :: lessRootOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'" + Colors.RED + " is  Z E R O  " + Colors.NOCOLOR );
			long start_time = System.currentTimeMillis ( );  // Это выражение относится к подсчету времени вычисления часть результата данного арифметического выражения, в случае количество цифр после запятой задано больше ста
			StringBuilder for_result = new StringBuilder ( number_2 );  // Этот есть текстовое представление данного числа, которое позже всякий раз будет представлять то же число в десять раз больше, когда к результату будет добавлен новый цифровой символ
			if ( ! system_numeration.isZero ( number_2 ) )  
			{
				// Это процедура нахождения ближайшего числа, степень которой меньше данного числа, и степень того же числа, предварительно увеличенное на единицу, больше данного числа. Данное число определяется первым параметром, а степень – вторым параметром
				this.approx_number = this.startValue ( number_1, number_2, system_numeration );
				while ( ! this.enoughLess ( this.approx_number, number_1, number_2, system_numeration ) )  this.approx_number = Operator.getIntegerDivideResult ( this.approx_number, number_1, system_numeration );
				this.approx_number = this.enoughMore ( this.approx_number, number_1, number_2, system_numeration );
				if ( this.pow.arithmeticOperation ( this.approx_number, number_1, system_numeration, false ).equals ( number_2 ) ) return this.approx_number;
				int count = system_numeration.getCiphersCount ( );
				int int_part = this.approx_number.length ( );
				while ( ( count -- ) > 0 ) 
				{
					for_result = this.addZeros ( for_result, number_1, system_numeration );
					this.approx_number = this.enoughMore ( this.approx_number.concat ( system_numeration.ZERO ), number_1, for_result.toString ( ), system_numeration );
					long end_time = System.currentTimeMillis ( );  // Это выражение относится к подсчету времени вычисления часть результата данного арифметического выражения, в случае количество цифр после запятой задано больше ста
					if ( system_numeration.getCiphersCount ( ) >= 100 )  out.println ( ( system_numeration.getCiphersCount ( ) - count ) + " __ " + this.approx_number + "  pasted time is __ " + ( ( end_time - start_time ) / 1000 ) + "  seconds" );  // Это выражение вывода НЕ полностью считанного результата, в смысле – после запятой на данный момент Не имеется столько цифр сколько задано по элементу ‘cipher’
				} 
				this.approx_number = this.approx_number.concat ( SystemNumeration.DEGREE_NEGATIVE.concat ( String.valueOf ( system_numeration.getCiphersCount ( ) ) ) );
			}

			return this.approx_number; 			
		}
		catch ( NullPointerException | ArithmeticException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: lessRootOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
	}
	
	private String startValue ( String number_1, String number_2, SystemNumeration system_numeration ) throws ArithmeticException  // Для нахождения числа, максимально ближе но меньше к данному числу, и которое в данной степени так же максимально ближе но меньше значении, на ровне данного числа в данной степени, применяется следующая логика – количество чисел без одного числа той значении в основном ровно произведению количество составных чисел данного числа, так же не считая начальную, и значению данной степени.
	{  
		try
		{
			number_2 = system_numeration.checkNumberFirstZeros ( number_2 );
			StringBuilder start_number = new StringBuilder ( system_numeration.ONE );  // Стартовая – та наименьшая, но максимально ближе к ответному числу – начинается с единицы, которой следую символы с нулевыми обозначениеми
			long count = 0;
			if ( system_numeration.isZero ( number_1 ) )  throw new ArithmeticException ( Colors.RED + "E X C E P T I O N -- The argument of the function 'Root :: startValue ( " + Colors.WHITE + number_1 + ", " + number_2 + Colors.RED + " )' is ZERO " + Colors.NOCOLOR );
			while ( ( -- count ) >= 0 )  start_number.append ( system_numeration.ZERO );
			return start_number.toString ( ); 			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: startValue ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
	}
	
	private boolean enoughLess ( String number, String number_1, String number_2, ArithmeticTable system_numeration )  // Это функция понадобится для того, что бы выяснить достаточно ли уменьшено данное число что это «уменьшение» в данной степени было ближе к данному числу, имеющийся под знаком корня.  Для это имеющийся «уменьшение» поднимается с начало нулевой степень, и так далее поднимается до данной степени. Если до конца этой процедуры по поднятию степени полученный ответ остается меньше данного числа, имеющийся под знаком корня, значит данное «уменьшение» есть максимальное, и с нее можно начать вычисление ближайшего числа, являющийся решением данной арифметической операции по корню 
	{	
		try
		{
			Counter counter = new Counter ( String.valueOf ( system_numeration.ZERO ), system_numeration );  // Это начальная степень для данного "уменьшения"
			String answer = number;  // Это ответ, полученный при поднятии данного "уменьшения" в степень
			while ( ! counter.toString ( ).equals ( number_1 )  &&  system_numeration.compareNumbers ( answer, number_2 ) < 0 )  // То есть пока степень не дошел до максимального ( то, которая дана ) и ответ на поднятие в степень не больше данного числа, имеющийся под знаком корня, степень будет увеличиваться на единицу
			{
				counter.statementUp ( );  // Это процедура увеличения степени
				answer = this.pow.arithmeticOperation ( number, counter.toString ( ), system_numeration, false );
			}
			return system_numeration.compareNumbers ( answer, number_2 ) <= 0;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: enoughLess ( " + Colors.YELLOW + number + ", " + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
	}
	
	private String enoughMore ( String number, String number_1, String number_2, ArithmeticTable system_numeration )
	{  
		try
		{
			Counter counter = new Counter ( number, system_numeration );
			while ( system_numeration.compareNumbers ( this.pow.arithmeticOperation ( counter.toString ( ), number_1, system_numeration, false ), number_2 ) <= 0 )  counter.statementUp ( );
			counter.statementDown ( );
			return counter.toString ( );			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: enoughMore ( " + Colors.YELLOW + number + ", " + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
	}
	
	private StringBuilder addZeros ( StringBuilder for_result, String number_1, SystemNumeration system_numeration )
	{  
		try
		{
			Counter counter = new Counter ( number_1, system_numeration );
			while ( ! counter.isZero ( ) )
			{
				counter.statementDown ( );
				for_result.append ( system_numeration.ZERO );
			} 
			return for_result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: addZeros ( " + Colors.YELLOW + for_result + ", " + number_1 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
	}

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "8", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "2", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "2", "8", Operator.test_system, true ).equals ( "28284271247¯10" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }  
		try { if ( ! this.arithmeticOperation ( "210", "258369147", Operator.test_system, true ).equals ( "10966253698¯10¯" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }  
	}
}

class Rest extends Operator 
{
	private StringBuilder added_a_few_zero = null;  // Этот элемент описывает все добавляемые символы с нулевым обозначением с конца вычитаемого числа, с целью сразу выяснить на сколько десять ( по данному систему счислению ) раз можно выполнить данную операцию вычитания
	
	@Override  
	public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException, ArithmeticException  // В этом случае имеется теория о том, что количество составных цифр значения квадрата данного числа ( в данном случае второго числа ) больше не более чем в два раза от количество составных цифр этого числа. То же самое верно для значения куба – не более чем в три раза. По этой теории в подобном случае данное ( по второму параметру ) число будет возведено в такой степень, чтобы количество составных цифр значения в этой степени было максимально ближе к количеству первого числа ( по первому параметру ), с целью итеративные операции по вычитанию, для вычисления остатка от деления, были выполнены как можно в меньшем количестве.  После получения результата первой операции вычитания, то второе число заново будет возведено в соответствующий степень
	{  
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			if ( system_numeration.isZero ( number_2 ) )  throw new ArithmeticException ( Colors.RED + "A R I T H M E T I C  E X C E P T I O N -- The second argument of the function " + Colors.WHITE + "'Rest :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'" + Colors.RED + " is  Z E R O  " + Colors.NOCOLOR );
			if ( system_numeration.compareNumbers ( number_1, number_2 ) >= 0 )
			{
				do
				{
					String number_3 = Operation.multiplyByTenAFewTimes ( number_1, number_2, this.added_a_few_zero, system_numeration );
					number_1 = Operation.subtract.arithmeticOperation ( number_1, number_3, system_numeration );
				}
				while ( system_numeration.compareNumbers ( number_1, number_2 ) >= 0 ); 
			}
			this.result = number_1;
			this.outputResult ( print_calling );			
			return this.result;			  
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
	}

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "121", "7", Operator.test_system, true ).equals ( "2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987654321", "123456789", Operator.test_system, true ).equals ( "9" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class Percent extends Operator 
{
	private String hundred = "100";
	
	@Override
	public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException  
	{
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			this.result = this.multiply.arithmeticOperation ( number_1, number_2, system_numeration, false ).concat ( SystemNumeration.DEGREE_NEGATIVE.concat ( system_numeration.TWO ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			  
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
	}

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "15", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123456", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987654321", "123456789", Operator.test_system, true ).equals ( "121932631112635269¯2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class Pow extends Operator 
{
	private Counter counter;
	
	@Override
	public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException  
	{
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			this.result = system_numeration.ONE;
			this.counter = new Counter ( number_2, system_numeration );
			
			while ( ! this.counter.isZero ( ) )
			{
				this.counter.statementDown ( );
				this.result = multiply.arithmeticOperation ( this.result, number_1, system_numeration, false );
			}
			this.result = system_numeration.checkNumberFirstZeros ( this.result );  // В ветой выуражении нету необходимости, поскольку начальные симолы с нулевым обозначением образуются при выполнении операции умножения, и эти символы в конце выполнения умножения так же на аппаратном уровне удаляются
			this.outputResult ( print_calling );
			return this.result;			  
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
	}

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "159", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "159", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3", "210", Operator.test_system, true ).equals ( "15684240429131529254685698284890751184639406145730291592802676915731672495230992603635422093849215049" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class Multiply extends Operator 
{
	private StringBuilder result;  // Это результат сумм произведений всех составных цифр второго числа по отдельности со всеми составными цифрами первого числа 	
	private String multi_result = null;
	private StringBuilder line_result = new StringBuilder ( ); 
	private int zero_count;  // Количество нулей, добавляемые с конца результата умножения очередного составной цифры второго числа с первым числом
	private String rest = null;
	
	@Override
	public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException, NullPointerException
	{
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			this.rest = system_numeration.ZERO;
			// Процедура создания двух итераторов с целью перебора составных цифр каждого из чисел 
			Iterator<String> iter = null;
			iter = Operation.makeListOfSymbols ( number_2 );

			this.result = new StringBuilder ( system_numeration.ZERO );
			this.zero_count = 0;
			
			try { this.computeLineResult ( number_1,  iter, system_numeration ); }  catch ( NoSuchElementException | NullPointerException ex ) { }
			this.result = system_numeration.checkNumberFirstZeros ( this.result );
			if ( print_calling )  out.println ( this.oper_text + this.result.toString ( ) + "\u001B[32m ' \u001B[0m" );
			return result.toString ( );			  
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
	}
	
	private void computeLineResult ( String number_1, Iterator<String> iter_2, ArithmeticTable system_numeration ) throws NullPointerException
	{
		try
		{
			Iterator<String> iter_1 = null;
			try { iter_1 = Operation.makeListOfSymbols ( number_1 ); }  catch ( NullPointerException ex )  { throw new NullPointerException ( ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ] ); }
			String first_cipher = iter_1.next ( );
			String second_cipher = iter_2.next ( );
			try
			{
				while ( true )  // Цикл перебора составных цифр первого числа
				{
					// С начало вычисляется мультирезультат
					this.multi_result = system_numeration.getMultiplicationTable ( ).get ( first_cipher.concat ( second_cipher ) );
					// К результату плюсуется имеющийся на тот момент остаток ( результата этой суммы будет оптимизирован, в смысле - начальный символ, в с3лучае будет иметь нулевое обозначение, будет удален )
					this.multi_result = this.summary.arithmeticOperation ( this.multi_result, this.rest, system_numeration, false );
					// С результата этой суммы извлекается остаток - в случае этот результат состоит с данной цифрки, остаток будет нулевым, а в противном случае остаток будет состоять с начальной цифрки результата этой суммы
					// Мультирезультат добавляется к линейному результату
					try  { this.line_result.insert ( 0, this.multi_result.charAt ( 1 ) );  this.rest = this.multi_result.substring ( 0, 1 ); }  catch ( StringIndexOutOfBoundsException ex ) { this.line_result.insert ( 0, this.multi_result.charAt ( 0 ) );  this.rest = system_numeration.ZERO; }
					first_cipher = iter_1.next ( );
				}
			}
			catch ( NoSuchElementException ex )  
			{ 
				this.line_result.insert ( 0, this.rest );
				this.rest = system_numeration.ZERO;
				for ( int count = 0;  count < this.zero_count;  ++ count )  this.line_result.append ( system_numeration.ZERO );		
				++ this.zero_count;
				this.result = new StringBuilder ( this.summary.arithmeticOperation ( this.result.toString ( ),  this.line_result.toString ( ),  system_numeration,  false ) );
				this.line_result = new StringBuilder ( );		
				this.computeLineResult ( number_1,  iter_2, system_numeration );  
			}			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: computeLineResult ( " + Colors.YELLOW + number_1 + ", " + iter_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
	}

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "159", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "159", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123456789", "987654321", Operator.test_system, true ).equals ( "121932631112635269" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class Divide extends Operator 
{
	private String divisor = null;  // Этот элемент носит значение делителя с целью искусственным образом изначально по возможности ее наращивать конечными символами с нулевым обозначением
	private String rest = null;  // Этот элемент носит значение, которое вычисляется всякий раз при выполнении операции вычитания делителя с этого значения. То есть в итоге он будет нести остаток, вычисленный в результате многократного выполнения операции вычитания, с участием ей самой и данного делителя
	private ArithmeticTable system_numeration = null;  // Этот элемент имеется в описании этого класса с целью всякий раз его НЕ создавать
	
	Counter counter_zeros = null;  // Показание этого счетчика описывает количество символов с нулевым обозначением, которые необходимо добавить с конца делителя с целью скоротать путь многократных выполнений операции вычитания с участием этого делителя
	Counter counter_howmatch = null;  // Это счетчик носит показание, относящийся к количеству выполненных операций вычитания с участием изменяющийся с каждым разом того остатка и данного делителя. Иначе говоря – описывает количество, относящийся к тому, конкретно сколько раз данный делитель может вместиться в данной число, определяющийся по первому параметру

	Divide ( ) { }
	
	@Override 
	public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws ArithmeticException, NullPointerException  // Это функция работает по следующей логике – целочисленный результат выполнения операции деления описывает количество вместимости данного делителя в данное число, опре4деляющийся по первому параметру. Так для выяснения этого количество менее затратно будет предварительно наращивать данный делитель конечными символами с нулевым обозначением по максимуму ( то есть так3, чтобы в итоге полученное число хотя бы в раз вместился в данное число ), после чего вычисляется остаток ( возможно ) многократного вычитания с данного числа это выращенное число, ,и по отношению полученного итогового остатка выполняется та же процедура, данный делитель наращивая по новому. По ходу многократной выполнении этой процедуры вычисляются некие результаты, которые необходимо сложить для получения итогового результат
	{
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			this.counter_zeros = new Counter ( system_numeration );
			this.counter_howmatch = new Counter ( system_numeration );
			if ( system_numeration.isZero ( number_2 ) )  throw new ArithmeticException ( Colors.RED + "A R I T H M E T I C  E X C E P T I O N -- The second argument of the function " + Colors.WHITE + "'Divide :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'" + Colors.RED + " is  Z E R O  " + Colors.NOCOLOR );
			number_1 = system_numeration.checkNumberFirstZeros ( number_1 );
			this.result = system_numeration.ZERO;  // Считается что начальный результат нулевой, по скольку по ходу вычисления к этому результату будут сложены многократные промежуточные результаты выполнения вышеописанной процедуры
			this.rest = number_1;  // Этот элемент носит значение, описывающее остаток данного числа в результате очередного выполнения операции вычитания
			this.system_numeration = system_numeration;  // Это необходимо для функции 'intermediateResult'
			
			do  // По этому циклу вычисляется количество, в которой данный делитель ( возможно предварительно выращенный ) входит данное по первому параметру число
			{
				this.divisor = number_2;  // Это выражение отдельного составления значения, описывающее данный делитель, с целью дальнейшего наращивания без изменения имеющийся по второму параметру делитель
				String intermedite_result = this.result;  // Это есть выражение сохранения текущего неокончательного результата перед вычислением очередного результата выполнения той операции вычитания по количеству вместимости, с целью последующего их сложения 
				this.intermediateResult ( );  
				this.result = this.summary.arithmeticOperation ( this.result, intermedite_result, system_numeration, false );
			}
			while ( system_numeration.compareNumbers ( this.rest, number_2 ) >= 0 );

			int point_index = this.result.length ( );
			int cipher_count = system_numeration.getCiphersCount ( );  // Значение, которое носит этот элемент, относится к начальным составным нулевым цифрам итогового результата данной операции деления. То есть в случае результат деления начинается с нулевой цифры, в место того, что бы это нулевая цифра была вписана, она считывается. А  так же считываются последующие нулевые цифры, если они имеются, пока не будет получена очередная НЕ нулевая цифра для составления итогового результата. То есть, в случае первая цифра есть нулевая, которой следует дробный символ, и этому символу так же будет следовать нулевой символ, то эти последующие нулевые символы в месте с начальным считываются для составления степени десяточной части составляющегося результата, и они НЕ вписываются, следовательно НЕ считается что после дробного символа была вписана какая не будь цифра
			boolean result_is_integer = this.rest.equals ( system_numeration.ZERO );  // Это выражение описывает итоговый нулевой остаток в результате выполнения многократных операций вычитания с остатка данный делитель, в смысле данное число без остатка делится на данный делитель 
			int zero_count = 0;  // Это есть количество начальный нулевых цифр составляемого результата данной операции деления, в случае с начало последовательно имеются нулевые цифры
			boolean first_zeros = this.result.equals ( system_numeration.ZERO );  // Значение, которое носит этот элемент описывает то, что с начальной вычисленной цифры, входящий в состав итогового результата данной операции деления, до нынешней вычисленной цифры, все вычисленные составные цифра пока были нулевыми. Как только очередная составная цифра будет НЕ нулевым, этот элемент будет нести ложное булево значение

			while ( cipher_count > 0  &&  ! result_is_integer )
			{			
				this.rest = this.rest.concat ( system_numeration.ZERO );
				String intermedite_result = this.result;
				if ( first_zeros )  zero_count ++;  else  cipher_count --;  // Пока очередное вычисленная цифра есть нулевое, она считывается, в противном случае вычисленная цифра вписывается, и на этот раз считывается вписанная цифра, имеющийся после запятой
				this.howMatch ( this.rest, number_2, system_numeration );
				if ( first_zeros )  first_zeros = this.result.equals ( system_numeration.ZERO );  else  this.result = intermedite_result.concat ( this.result );
			}

			StringBuilder built = new StringBuilder ( this.result );
			if ( system_numeration.getCiphersCount ( ) > 0  &&  ! result_is_integer )  // Точка вставляется в случае изначально указано количество цифр после запятых, а так же в случае данное число НЕ делится на данный делитель без остатка 
			{
				built.append ( SystemNumeration.DEGREE_NEGATIVE );
				built.append ( Operation.summary.arithmeticOperation ( String.valueOf ( system_numeration.getCiphersCount ( ) ), String.valueOf ( zero_count ), system_numeration, false ) );
				built.append ( SystemNumeration.DEGREE_NEGATIVE );
			}  

			this.result = built.toString ( );

			this.outputResult ( print_calling );
			return this.result;			  
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
	}
	
	private void intermediateResult ( )
	{
		long statement = this.rest.length ( ) - this.divisor.length ( ) - 1;  // Тут элемент 'statement' носит отрицательное значение, что приводит к добавлению нулей к остатку от деления на данный момент ( этот "на данный момент" могут чередовать друг другу в бесконечном количестве )
		try { this.counter_zeros.setStatement ( String.valueOf ( statement ) ); }  catch ( IllegalArgumentException ex ) { this.counter_zeros.setZero ( ); } 
		this.divisor = this.system_numeration.addBackZeroSymbols ( this.rest, this.divisor );
		this.howMatch ( this.rest, this.divisor, this.system_numeration );
		while ( ! this.counter_zeros.isZero ( ) )  
		{
			this.counter_zeros.statementDown ( );
			this.result = this.result.concat ( this.system_numeration.ZERO );
		}
	} 
	
	private void howMatch ( String number_1, String number_2, ArithmeticTable system_numeration )  // Это функция вычисляет количество, в которой данное по второму параметру число вмещается в число, данное по первому параметру
	{
		this.counter_howmatch.setStatement ( system_numeration.ZERO );  // Показание этого счетчика и будет то количество
		while ( system_numeration.compareNumbers ( number_1, number_2 ) >= 0 )  // Процедура ниже выполняется циклически пока всякий раз полученный остаток больше или ровно данному делителю, определяющийся по второму параметру, и возможно выращенную
		{
			number_1 = this.subtract.arithmeticOperation ( number_1, number_2, system_numeration );  // Этим выражением всякий раз вычисляется остаток вычитания того делителя с данного числа
			this.counter_howmatch.statementUp ( );  // А тут вычисляется количество вместимости 
		}
		this.result = system_numeration.checkNumberFirstZeros ( this.counter_howmatch.toString ( ) );  // Это есть очередной промежуточный результат операции деления
		this.rest = number_1;  // Это есть остаток от деления, который возможно в дальнейшем будет наращен конечным символом с нулевым обозначением 
	}

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "159", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "159", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987654321", "123456789", Operator.test_system, true ).equals ( "80000000729¯10¯" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class Summary extends Operator 
{	
	@Override
	public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException  
	{
	  	try
		{
			if ( system_numeration.isZero ( number_1 ) )  return number_2;  else if ( system_numeration.isZero ( number_2 ) )  return number_1;
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			String rest = system_numeration.ZERO;
			// Процедура выуравнивания количество составных цифр двух чисел - изначально цифр составных цифр меньше или в первом числе, или же во втором
			while ( number_2.length ( ) < number_1.length ( ) )  number_2 = system_numeration.ZERO.concat ( number_2 );  while ( number_1.length ( ) < number_2.length ( ) )  number_1 = system_numeration.ZERO.concat ( number_1 );  
			// Процедура создания двух итераторов с целью перебора составных цифр каждого из чисел 
			Iterator<String> iter_1, iter_2 = null;
			iter_1 = Operation.makeListOfSymbols ( number_1 );  iter_2 = Operation.makeListOfSymbols ( number_2 );
			// Создается элемент, представляющий результат вычитания, изначально внося знак результата, если он отрицательный
			StringBuilder result = new StringBuilder ( );  
			try
			{
				String result_2 = null;
				while ( true )
				{
					String cipher_1 = iter_1.next ( ),  cipher_2 = iter_2.next ( );
					String result_1 = system_numeration.getAdditionalTable ( ).get ( cipher_1.concat ( cipher_2 ) );
					result_2 = system_numeration.getAdditionalTable ( ).get ( String.valueOf ( result_1.charAt ( 1 ) ).concat ( rest ) );
					result.insert ( 0, result_2.charAt ( 1 ) );
					if ( result_1.charAt ( 0 ) == system_numeration.ONE.charAt ( 0 )  ||  result_2.charAt ( 0 ) == system_numeration.ONE.charAt ( 0 ) )  rest = system_numeration.ONE;  else  rest = system_numeration.ZERO;
				}
			}
			catch ( NoSuchElementException ex ) { if ( rest.equals ( system_numeration.ONE ) )  result.insert ( 0, rest ); }
			this.result = result.toString ( );
			this.outputResult ( print_calling ); 
			return this.result;			  
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
	}

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "159", Operator.test_system, true ).equals ( "159" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "159", "0", Operator.test_system, true ).equals ( "159" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987654321", "123456789", Operator.test_system, true ).equals ( "1111111110" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class Subtract extends Operator 
{	
	private String minus = null;  // Этот элемент будет нести знак минуса в текстовом представлении, в случае окажется что первый параметр меньше второго
	private ArithmeticTable system_numeration = null;
	private char dept = 0;  // Это «долг» при вычитании большой цифры с меньшей, то есть бывает толи ‘0’, толи ‘1’
	private char ZERO = 0;  // Этот класс имеет свои представления нулевых и единичных чисел, с целью каждый раз не вычислить эти цифра по данному систему счислению
	private char ONE = 0;  // ...
	private StringBuilder number_built_1 = null;  // Действие по вычитанию будут выполнятся с таким представлением первого числа
	
	@Override
	public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException  // Это функция отличается от своей перегрузки наличием четвертого параметра, а ее исполнение отличается с предварительным выполнением нижеописанной процедуры с вычислением знака результата вычитания двух чисел
	{
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			// Процедура предварительного переупорядочивания двух чисел 
			String [ ] str_array = null;
			str_array = Operation.addAFewZeros ( number_1, number_2, system_numeration );
			number_1 = str_array [ 0 ];  number_2 = str_array [ 1 ];  this.minus = str_array [ 2 ];
			
			this.result = this.arithmeticOperation ( number_1, number_2, system_numeration );
			if ( this.minus != null )  this.result = this.minus.concat ( this.result );
			this.outputResult ( print_calling );
			return this.result;			  
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + ", " + print_calling + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
	} 
	
	String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration ) throws NullPointerException  // Это функция определена специально для вызова в теле функции деления и считывания остатка – при ее работе вычисляется разница между двумя числами, в смысле подразумевается, что первое число больше или роно второго
	{
		this.system_numeration = system_numeration;
		Integer index_1, index_2 = null;
		try
		{
			this.ZERO = this.system_numeration.ZERO.charAt ( 0 );
			this.ONE = this.system_numeration.ONE.charAt ( 0 );
			this.number_built_1 = new StringBuilder ( number_1 );
			index_1 = number_built_1.length ( ) - 1;  index_2 = number_2.length ( ) - 1;  // Индексные значения для обеих чисел начинаются с их концов			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }

		this.dept = ZERO;  // Изначально считается, что тот «долг» нулевой
		String primordioal_result = null;  // Это результат вычитания двух соответствующих составных цифр обеих чисел
		try
		{
			while ( true )
			{
				String key = String.valueOf ( this.number_built_1.charAt ( index_1 ) ) + number_2.charAt ( index_2 -- );  // Это ключевое значение относится к картовому элементу описания класса ‘Device’
				primordioal_result = system_numeration.getSubtractiveTable ( ).get ( key );  // То есть результат вычитания двух составных соответствующих цифр обеих чисел белеться с таблицы вычитания
				this.number_built_1.replace ( index_1 --, index_1 + 2, String.valueOf ( primordioal_result.charAt ( 0 ) ) );  // Первый символ этого результата есть цифра, которой необходимо заменить соответствующую цифру первого числа
				this.dept = primordioal_result.charAt ( 1 );  // А второй символ описывает долг при очередном вычитании двух составных цифр
				
				int ramble_index = index_1;  // Этот элемент последовательно до самого начало первого числа будет индексировать ее цифры, с целью они были заменены соответственно наличию «долга»
				while ( this.dept == this.ONE  &&  ramble_index >= 0 )
				{		
					String to_replace = this.system_numeration.getSubtractiveTable ( ).get ( String.valueOf ( this.number_built_1.charAt ( ramble_index ) ) + this.dept );  // Тут вычитается "долг"
					this.number_built_1.replace ( ramble_index --, ( ramble_index + 2 ), String.valueOf ( to_replace.charAt ( 0 ) ) );
					this.dept = to_replace.charAt ( 1 );  // После очередного вычитания "долга" этот "долг" заново вычисляется - возможно долг вычитается с нулевого цифра
				}
			}
		}
		catch ( StringIndexOutOfBoundsException ex )  // После перебора начальной составной цифры второго числа перебор составных цифр завершается, и в месте с ним завершается выполнение операции вычитания двух чисел
		{
			this.number_built_1 = system_numeration.checkNumberFirstZeros ( this.number_built_1 );  // С состава результирующего числа удаляются все нулевые цифра, образовавш1ийся при ходе выполнения операции вычитания
			return this.number_built_1.toString ( );
		}
	} 

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "159", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "159" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "159", "0", Operator.test_system, true ).equals ( "159" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987654321", "123456789", Operator.test_system, true ).equals ( "864197532" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123456789", "987654321", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "864197532" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

//--- Д Л Я   В Ы П О Л Н Е Н И Я  Л О Г И Ч Е С К И Х   О П Е Р А Ц И Й    Н А Д   О Б Ы Ч Н Ы М И   О П Е Р А Н Д А М И ---
class Less extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			if ( system_numeration.compareNumbers ( number_1, number_2 ) < 0 )  this.result = system_numeration.ONE;  else  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "987", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class LessOrEven extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			if ( system_numeration.compareNumbers ( number_1, number_2 ) <= 0 )  this.result = system_numeration.ONE;  else  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "987", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class More extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			if ( system_numeration.compareNumbers ( number_1, number_2 ) > 0 )  this.result = system_numeration.ONE;  else  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "987", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MoreOrEven extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			if ( system_numeration.compareNumbers ( number_1, number_2 ) >= 0 )  this.result = system_numeration.ONE;  else  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "987", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class Even extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			if ( system_numeration.compareNumbers ( number_1, number_2 ) == 0 )  this.result = system_numeration.ONE;  else  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "987", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class NotEven extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			if ( system_numeration.compareNumbers ( number_1, number_2 ) != 0 )  this.result = system_numeration.ONE;  else  this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "987", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

//--- Д Л Я   В Ы П О Л Н Е Н И Я   О П Е Р А Ц И Й   С   Ч И С Л А М И   С   Т О Ч К О Й ---
class Point extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			if ( system_numeration.isZero ( number_2 ) )  this.result = number_1;
			else
			{
				if ( system_numeration.isZero ( number_2 ) )  return number_1;
				StringBuilder built = new StringBuilder ( number_1.concat ( number_2 ) );
				built.append ( SystemNumeration.DEGREE_NEGATIVE.concat ( String.valueOf ( number_2.length ( ) ) ) );
				this.result = built.toString ( );
			}
			
			this.outputResult ( print_calling );
			return result.toString ( );			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "0123¯3" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "0", Operator.test_system, true ).equals ( "123" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "987", Operator.test_system, true ).equals ( "123987¯3" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

//--- Д Л Я   В Ы П О Л Н Е Н И Я   П Р О С Т Е Й Ш И Х   А Р И Ф М Е Т И Ч Е С К И Х   О П Е Р А Ц И Й   С   О Т Р И Ц А Т Е Л Ь Н Ы М   В Т О Р Ы М   О П Е Р А Н Д О М ---
class RootMinus extends Operator 
{
    private int cipher_count = 0;  // Этот элемент описывает количество составных цифр результата, имеющийся после запятой

    RootMinus ( ) { }
    RootMinus ( int cipher_count ) { this.cipher_count = cipher_count; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			this.result = this.root.arithmeticOperation ( number_1, number_2, system_numeration, false );
			if ( ! system_numeration.isZero ( this.result ) )  this.result = SystemNumeration.MINUS.concat ( this.result );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "210", "123456789", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "10927756865¯10¯" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "210", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class PowMinus extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );

			this.result = this.pow.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.result = this.divide.arithmeticOperation ( system_numeration.ONE, this.result, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "5", Operator.test_system, true ).equals ( "35520121512¯21¯" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MultiplyMinus extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.multiply.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "987", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "121401" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DivideMinus extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			this.result = this.divide.arithmeticOperation ( number_1, number_2, system_numeration, false );
			if ( ! system_numeration.isZero ( this.result ) )  this.result = SystemNumeration.MINUS.concat ( this.result );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987", "123", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "80243902439¯10¯" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "987", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "12462006079¯11¯" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

//--- Д Л Я   В Ы П О Л Н Е Н И Я   П Р О С Т Е Й Ш И Х   А Р И Ф М Е Т И Ч Е С К И Х   О П Е Р А Ц И Й   ( О Б А   О П Е Р А Н Д А   О Т Р И Ц А Т Е Л Ь Н Ы Е ) ---
class MinusRootMinus extends Operator 
{
    private int cipher_count = 0;  // Этот элемент описывает количество составных цифр результата, имеющийся после запятой

    MinusRootMinus ( ) { }
    MinusRootMinus ( int cipher_count ) { this.cipher_count = cipher_count; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.root.lessRootOperation ( number_1, number_2, system_numeration );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "210", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "210", "123456789", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusPowMinus extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.pow.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.result = SystemNumeration.MINUS.concat ( this.divide.arithmeticOperation ( system_numeration.ONE, this.result, system_numeration, false ) );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusMultiplyMinus extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.multiply.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
	}
}

class MinusDivideMinus extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.divide.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
	}
}
// --------------------------------

//--- Д Л Я   В Ы П О Л Н Е Н И Я   Л О Г И Ч Е С К И Х   О П Е Р А Ц И Й   ( П Е Р В Ы Й   О П Е Р А Н Д   О Т Р И Ц А Т Е Л Ь Н Ы Й ) ---
class MinusLess extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( system_numeration.isZero ( number_1 )  &&  system_numeration.isZero ( number_2 ) )  this.result = system_numeration.ZERO;  else  this.result = system_numeration.ONE;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "987", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusLessOrEven extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = system_numeration.ONE;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "987", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusMore extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "987", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusMoreOrEven extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( system_numeration.isZero ( number_1 )  &&  system_numeration.isZero ( number_2 ) )  this.result = system_numeration.ONE;  else  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "987", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusEven extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( system_numeration.isZero ( number_1 )  &&  system_numeration.isZero ( number_2 ) )  this.result = system_numeration.ONE;  else  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "987", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusNotEven extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( system_numeration.isZero ( number_1 )  &&  system_numeration.isZero ( number_2 ) )  this.result = system_numeration.ZERO;  else  this.result = system_numeration.ONE;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "987", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

//--- Д Л Я   В Ы П О Л Н Е Н И Я   Л О Г И Ч Е С К И Х   О П Е Р А Ц И Й   ( В Т О Р О Й   О П Е Р А Н Д   О Т Р И Ц А Т Е Л Ь Н Ы Й ) ---
class LessMinus extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "987", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class LessOrEvenMinus extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( system_numeration.isZero ( number_1 )  &&  system_numeration.isZero ( number_2 ) )  this.result = system_numeration.ONE;  else  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "987", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MoreMinus extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( system_numeration.isZero ( number_1 )  &&  system_numeration.isZero ( number_2 ) )  this.result = system_numeration.ZERO;  else  this.result = system_numeration.ONE;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "987", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MoreOrEvenMinus extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = system_numeration.ONE;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "987", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class EvenMinus extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( system_numeration.isZero ( number_1 )  &&  system_numeration.isZero ( number_2 ) )  this.result = system_numeration.ONE;  else  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "987", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class NotEvenMinus extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( system_numeration.isZero ( number_1 )  &&  system_numeration.isZero ( number_2 ) )  this.result = system_numeration.ZERO;  else  this.result = system_numeration.ONE;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "987", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

//--- Д Л Я   В Ы П О Л Н Е Н И Я   Л О Г И Ч Е С К И Х   О П Е Р А Ц И Й   ( О Б А   О П Е Р А Н Д А   О Т Р И Ц А Т Е Л Ь Н Ы Е ) ---
class MinusLessMinus extends Operator 
{
    MinusLessMinus ( )  { this.operation = Operation.less; }
    MinusLessMinus ( Operation operation ) { this.operation = operation; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( system_numeration.compareNumbers ( number_1, number_2 ) == 0 )  this.result = system_numeration.ZERO;
			else
			{
				this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
				this.result = Operator.alterBoolValue ( this.result, system_numeration );
			}

			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "987", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusLessOrEvenMinus extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( system_numeration.compareNumbers ( number_1, number_2 ) == 0 )  this.result = system_numeration.ONE;  // Логика в том, что в случае данные два числа ровны, то результат данной логической операции есть положительное
			else
			{
				this.result = this.less_or_even.arithmeticOperation ( number_1, number_2, system_numeration, false );
				this.result = Operator.alterBoolValue ( this.result, system_numeration );
			}

			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "987", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusMoreMinus extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( system_numeration.compareNumbers ( number_1, number_2 ) == 0 )  this.result = system_numeration.ZERO;
			else
			{
				this.result = this.more.arithmeticOperation ( number_1, number_2, system_numeration, false );
				this.result = Operator.alterBoolValue ( this.result, system_numeration );
			}

			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "987", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusMoreOrEvenMinus extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( system_numeration.compareNumbers ( number_1, number_2 ) == 0 )  this.result = system_numeration.ONE;  // Логика в том, что в случае данные два числа ровны, то результат данной логической операции есть положительное
			else
			{
				this.result = this.more_or_even.arithmeticOperation ( number_1, number_2, system_numeration, false );
				this.result = Operator.alterBoolValue ( this.result, system_numeration );
			}
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "987", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusEvenMinus extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.even.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "987", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusNotEvenMinus extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.not_even.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "987", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "987", "123", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "123", "123", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

//--- Д Л Я   В Ы П О Л Н Е Н И Я   П Р О С Т Е Й Ш И Х   А Р И Ф М Е Т И Ч Е С К И Х   О П Е Р А Ц И Й  С О   С Т Е П Е Н Ь Ю   Д Е С Я Т О Ч Н О Й   Ч А С Т И ---
class D_Factorial extends Operator 
{
	D_Factorial ( )  { this.operation = Operation.factorial; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			try
			{
				String number = Operation.getFullInteger ( number_1, system_numeration );
				this.result = this.operation.arithmeticOperation ( number, number_2, system_numeration, false );
				this.outputResult ( print_calling );			
			}
			catch ( IllegalArgumentException ex )  { out.println ( ex.getMessage ( ) ); }
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ] + Colors.RED + Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0", Operator.test_system, true ).equals ( "120" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°1", "0", Operator.test_system, true ).equals ( "30414093201713378043612608166064768844377641568960512000000000000" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_Factorial extends Operator 
{
	DN_Factorial ( )  { this.operation = Operation.factorial; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException, ArithmeticException  { throw new ArithmeticException ( Colors.RED + "A R I T H M E T I C  E X C E P T I O N -- Trying to call  " + Colors.WHITE + "'DN_Factorial :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'" + Colors.NOCOLOR ); }

	@Override
	public void testingClass ( )
	{
		
	}
}
// --------------------------------

class Root_D extends Operator 
{
	private String degree_symbol = null;  // Это есть знак степени десяточной части результата операции корня, и в случае этот результат НЕ имеет десяточной части, значение этого элемента будет нулевым. А в случае имеет, подразумевается, что этот степень есть отрицательный
	private String for_degree = "multiply";
	
	Root_D ( ) { this.operation = this.multiply; }
	Root_D ( Operation operation ) { this.operation = operation;  this.for_degree = "divide"; }
	
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException, ArithmeticException  // Логика состоит в следующем: десяточная часть второго числа в свою очередь есть число, представляющее количество символов с нулевыми обозначениями этой десяточной части. Так в случае данное ( второе ) число ходит под корень, количество этих символов сокращается на ровне со степенью данного корня. В случае это количество в качестве числового значения делится на ту степень данного корня, результат данного арифметического выражения умножается на число, начинающийся с единичной цифры, имея после этой единицы символы с нулевым обозначением на ровне результату деления «на ту степень», а в случае НЕ делится, результат данного арифметического выражения умножается на результат арифметического выражения, являющийся корнем с данной степенью от числа десять ( по данному системе счислению ), умножая на целый результат того деления «на ту степень»
    {
		if ( system_numeration.isZero ( number_1 ) )  throw new ArithmeticException ( Colors.RED + "A R I T H M E T I C  E X C E P T I O N -- The first argument of the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'" + Colors.RED + " is  Z E R O  " + Colors.NOCOLOR );
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( system_numeration.isZero  ( number_2 ) )  this.result = system_numeration.ZERO;
			else
			{
				String str_array [ ] = Operation.getAllParts ( number_2, system_numeration );  // Второе число просматривается как число из двух частей – целая часть, и степень десяточной части, с целью над каждым из этих двух частей выполнить действие операции корня со степенью, определяющийся по первому параметру
				String result_int = this.root.arithmeticOperation ( number_1, str_array [ 0 ], system_numeration, false );
				String result_degree = Operation.rootOfTenPow ( number_1, str_array [ 2 ], system_numeration );

				String str_array_1 [ ] = Operation.getAllParts ( result_int, system_numeration );
				String str_array_2 [ ] = Operation.getAllParts ( result_degree, system_numeration );
				String degree = Operation.computeDegree ( str_array_1 [ 1 ].concat ( str_array_1 [ 2 ] ), str_array_2 [ 1 ].concat ( str_array_2 [ 2 ] ), this.for_degree, system_numeration );
				this.result = this.operation.arithmeticOperation ( str_array_1 [ 0 ], str_array_2 [ 0 ], system_numeration, false ).concat ( degree );
				this.result = Operation.reunitNeighboringTenPow ( this.result, system_numeration );				
			}

			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new ArithmeticException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ] + Colors.RED + Colors.RED + "\nA R I T H M E T I C  E X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "9°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "0°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "2", "9°0", Operator.test_system, true ).equals ( "3°0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "2", "9°1", Operator.test_system, true ).equals ( "94868329803¯10" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3", "7°4", Operator.test_system, true ).equals ( "412128529959160786300¯19" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class Root_DN extends Operator 
{
	private Operation operator = new Root_D ( Operation.divide );
	
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException, ArithmeticException
    {  
		if ( system_numeration.isZero ( number_1 ) )  throw new ArithmeticException ( Colors.RED + "A R I T H M E T I C  E X C E P T I O N -- The first argument of the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'" + Colors.RED + " is  Z E R O  " + Colors.NOCOLOR );
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
				
			if ( system_numeration.isZero ( number_2 ) )  this.result = system_numeration.ZERO;
			else
			{
				this.result = this.operator.arithmeticOperation ( number_1, number_2, system_numeration, false );	
				// В связи с тем, что очень сложным образом результат часто имеет значение десяточной части превосходящее заданное количество цифр после запятых, выполняется процедура приведение этого значения десяточной части в норму
				String [ ] str_array = this.result.split ( "\\W" );
				if ( system_numeration.compareNumbers ( str_array [ 1 ], String.valueOf ( system_numeration.getCiphersCount ( ) ) ) > 0 )  
				{
					int diff_count = Integer.parseInt ( str_array [ 1 ] ) - system_numeration.getCiphersCount ( );
					StringBuilder built = new StringBuilder ( str_array [ 0 ] );
					built.delete ( built.length ( ) - diff_count, built.length ( ) );
					this.result = built.toString ( ).concat ( SystemNumeration.DEGREE_NEGATIVE.concat ( String.valueOf ( system_numeration.getCiphersCount ( ) ) ).concat ( SystemNumeration.DEGREE_NEGATIVE ) );
				}				
			}

			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new ArithmeticException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ] + Colors.RED + Colors.RED + "\nA R I T H M E T I C  E X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "3¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3", "9¯0", Operator.test_system, true ).equals ( "20800838230¯10" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3", "9¯2", Operator.test_system, true ).equals ( "4481404746¯10¯" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_Root extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws ArithmeticException, NullPointerException
    {
		if ( system_numeration.isZero ( number_1 ) )  throw new ArithmeticException ( Colors.RED + "A R I T H M E T I C  E X C E P T I O N -- The first argument of the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'" + Colors.RED + " is  Z E R O  " + Colors.NOCOLOR );
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );

			if ( system_numeration.isZero ( number_2 ) )  this.result = system_numeration.ZERO;
			else
			{
				String number = Operation.getFullInteger ( number_1, system_numeration );
				this.result = this.root.arithmeticOperation ( number, number_2, system_numeration, true );				
			}

			this.outputResult ( print_calling );			
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new ArithmeticException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ] + Colors.RED + Colors.RED + "\nA R I T H M E T I C  E X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "2°2", "31", Operator.test_system, true ).equals ( "10173181866¯10¯" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3°3", "31", Operator.test_system, true ).equals ( "10011453177¯10¯" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_Root extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException, ArithmeticException
    {
		if ( system_numeration.isZero ( number_1 ) )  throw new ArithmeticException ( Colors.RED + "A R I T H M E T I C  E X C E P T I O N -- The first argument of the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'" + Colors.RED + " is  Z E R O  " + Colors.NOCOLOR );
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( system_numeration.isZero ( number_2 ) )  this.result = system_numeration.ZERO;
			else
			{
				String [ ] str_array = Operation.getAllParts ( number_1, system_numeration );
				String degree = Operation.addZeros ( system_numeration.ONE, str_array [ 2 ], system_numeration );
				this.result = this.pow.arithmeticOperation ( number_2, degree, system_numeration, false );
				this.result = Operation.root.arithmeticOperation ( str_array [ 0 ], this.result, system_numeration, false );				
			}
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new ArithmeticException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ] + Colors.RED + Colors.RED + "\nA R I T H M E T I C  E X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3¯1", "3", Operator.test_system, true ).equals ( "389407383983¯10" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_Root_D extends Operator 
{
	D_Root_D ( )  { this.operation = new Root ( ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws ArithmeticException, NullPointerException
    {
		if ( system_numeration.isZero ( number_1 ) )  throw new ArithmeticException ( Colors.RED + "A R I T H M E T I C  E X C E P T I O N -- The first argument of the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'" + Colors.RED + " is  Z E R O  " + Colors.NOCOLOR );
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( system_numeration.isZero ( number_2 ) )  this.result = system_numeration.ZERO;
			else
			{
				number_1 = Operation.getFullInteger ( number_1, system_numeration );
				number_2 = Operation.getFullInteger ( number_2, system_numeration );
				this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );				
			}
 
			this.outputResult ( print_calling );			
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new ArithmeticException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ] + Colors.RED + Colors.RED + "\nA R I T H M E T I C  E X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3°0", "9°0", Operator.test_system, true ).equals ( "20800838230¯10" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0°6", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3°1", "2°2", Operator.test_system, true ).equals ( "11931663584¯10¯" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_Root_DN extends Operator 
{  
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws ArithmeticException, NullPointerException
    {
		if ( system_numeration.isZero ( number_1 ) )  throw new ArithmeticException ( Colors.RED + "A R I T H M E T I C  E X C E P T I O N -- The first argument of the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'" + Colors.RED + " is  Z E R O  " + Colors.NOCOLOR );
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			if ( system_numeration.isZero ( number_2 ) )  this.result = system_numeration.ZERO;
			else
			{
				// Это процедура разделения обеих чисел по двум частям – обычная целая часть и степень десяточной части
				String [ ] str_array_1 = Operation.getAllParts ( number_1, system_numeration );
				String [ ] str_array_2 = Operation.getAllParts ( number_2, system_numeration );

				String pow_degree = Operation.addZeros ( system_numeration.ONE, str_array_1 [ 2 ], system_numeration );
				
				String result_1 = this.root.arithmeticOperation ( str_array_1 [ 0 ], str_array_2 [ 0 ], system_numeration, true );
				String result_2 = Operation.rootOfTenPow ( str_array_1 [ 0 ], str_array_2 [ 2 ], system_numeration );
				
				if ( result_1.indexOf ( SystemNumeration.DEGREE_NEGATIVE ) == -1 )  result_1 = result_1.concat ( SystemNumeration.DEGREE_NEGATIVE.concat ( system_numeration.ZERO ) );
				if ( result_2.indexOf ( SystemNumeration.DEGREE_NEGATIVE ) == -1 )  result_2 = result_2.concat ( SystemNumeration.DEGREE_NEGATIVE.concat ( system_numeration.ZERO ) );
				
				this.result = this.dn_divide_dn.arithmeticOperation ( result_1, result_2, system_numeration, true );
				
				if ( this.result.indexOf ( SystemNumeration.DEGREE ) != -1 )  this.operation = this.d_pow;  else  this.operation = dn_pow;
				this.result = this.operation.arithmeticOperation ( this.result, pow_degree, system_numeration, true );				
			}

			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new ArithmeticException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ] + Colors.RED + Colors.RED + "\nA R I T H M E T I C  E X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3¯0", "9¯0", Operator.test_system, true ).equals ( "20800838230¯10" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0¯6", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3¯1", "2¯2", Operator.test_system, true ).equals ( "217153409091667268622319509501869035612694911183653275578312843593334794791813909211532780070520792543849¯110" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_Root_DN extends Operator 
{
	D_Root_DN ( )  { this.operation = Operation.root_dn; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws ArithmeticException, NullPointerException
    {
		if ( system_numeration.isZero ( number_1 ) )  throw new ArithmeticException ( Colors.RED + "A R I T H M E T I C  E X C E P T I O N -- The first argument of the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'" + Colors.RED + " is  Z E R O  " + Colors.NOCOLOR );
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( system_numeration.isZero ( number_2 ) )  this.result = system_numeration.ZERO;
			else
			{
				String number = Operation.getFullInteger ( number_1, system_numeration );
				this.result = this.operation.arithmeticOperation ( number, number_2, system_numeration, false );				
			}
			
			this.outputResult ( print_calling );			
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new ArithmeticException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ] + Colors.RED + Colors.RED + "\nA R I T H M E T I C  E X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3°0", "9¯0", Operator.test_system, true ).equals ( "20800838230¯10" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0¯6", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3°1", "2¯2", Operator.test_system, true ).equals ( "8777435898¯10¯" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_Root_D extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws ArithmeticException, NullPointerException
    {
		if ( system_numeration.isZero ( number_1 ) )  throw new ArithmeticException ( Colors.RED + "A R I T H M E T I C  E X C E P T I O N -- The first argument of the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'" + Colors.RED + " is  Z E R O  " + Colors.NOCOLOR );
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( system_numeration.isZero ( number_2 ) )  this.result = system_numeration.ZERO;
			else
			{
				String [ ] str_array = Operation.getAllParts ( number_1, system_numeration );
				String pow_degree = Operation.addZeros ( system_numeration.ONE, str_array [ 2 ], system_numeration );
				this.result = this.root_d.arithmeticOperation ( str_array [ 0 ], number_2, system_numeration, true );
				
				this.operation = this.dn_pow;
				if ( this.result.indexOf ( SystemNumeration.DEGREE ) == -1  &&  this.result.indexOf ( SystemNumeration.DEGREE_NEGATIVE ) == -1 )  this.operation = this.pow;  else if ( this.result.indexOf ( SystemNumeration.DEGREE ) != -1 )  this.operation = this.d_pow;
				this.result = this.operation.arithmeticOperation ( this.result, pow_degree, system_numeration, true );				
			}

			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new ArithmeticException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ] + Colors.RED + Colors.RED + "\nA R I T H M E T I C  E X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3¯0", "9°0", Operator.test_system, true ).equals ( "20800838230¯10" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0°6", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3¯1", "2°2", Operator.test_system, true ).equals ( "4678428377488884764224896566873698296783843599698762298764953321375986670387807212084827390815344395335011116901359550160954645439865623866877365271035511338469043374847044283151910689587223030548019149799424¯200" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class Rest_D extends Operator 
{
	Rest_D ( )  { this.operation = new Rest ( ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException, ArithmeticException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			try
			{
				String number = Operation.getFullInteger ( number_2, system_numeration );
				this.result = this.operation.arithmeticOperation ( number_1, number, system_numeration, false );
				this.outputResult ( print_calling );			
			}
			catch ( IllegalArgumentException ex )  { out.println ( ex.getMessage ( ) + new Throwable ( ).getStackTrace ( ) [ 0 ] ); }
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "3°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "37", "7°0", Operator.test_system, true ).equals ( "2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3159", "2°2", Operator.test_system, true ).equals ( "159" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class Rest_DN extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] str_array = Operation.getAllParts ( number_2, system_numeration );
			this.result = this.rest.arithmeticOperation ( number_1, str_array [ 0 ], system_numeration, false ).concat ( SystemNumeration.DEGREE_NEGATIVE.concat ( str_array [ 2 ] ) );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "3¯0", Operator.test_system, true ).equals ( "0¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "37", "7¯0", Operator.test_system, true ).equals ( "2¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3159", "2¯2", Operator.test_system, true ).equals ( "1¯2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_Rest extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			try
			{
				String number = Operation.getFullInteger ( number_1, system_numeration );
				this.result = this.rest.arithmeticOperation ( number, number_2, system_numeration, false );
				this.outputResult ( print_calling );			
			}
			catch ( IllegalArgumentException ex )  { out.println ( ex.getMessage ( ) + new Throwable ( ).getStackTrace ( ) [ 0 ] ); }
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "37°0", "7", Operator.test_system, true ).equals ( "2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3159°2", "7", Operator.test_system, true ).equals ( "4" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_Rest extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException  // Логика выполнения функции такого – левый операнд имеет дробную часть, и по этому для получения левого Не дробного операнда, оба операнда умножаются на ту дробную часть левого операнда, за тем после получения результата этого деления с остатком, его делим на ту дробную часть
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] str_array = Operation.getAllParts ( number_1, system_numeration );
			number_2 = Operation.addZeros ( number_2, str_array [ 2 ], system_numeration );
			this.result = this.rest.arithmeticOperation ( str_array [ 0 ], number_2, system_numeration, false ).concat ( SystemNumeration.DEGREE_NEGATIVE.concat ( str_array [ 2 ] ) );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3¯0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "3", Operator.test_system, true ).equals ( "0¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "37¯0", "7", Operator.test_system, true ).equals ( "2¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3159¯2", "7", Operator.test_system, true ).equals ( "359¯2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_Rest_D extends Operator 
{
	D_Rest_D ( )  { this.operation = new Rest_D ( ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			try
			{
				String number = Operation.getFullInteger ( number_1, system_numeration );
				this.result = this.operation.arithmeticOperation ( number, number_2, system_numeration, false );
				this.outputResult ( print_calling );			
			}
			catch ( IllegalArgumentException ex )  { out.println ( ex.getMessage ( ) + new Throwable ( ).getStackTrace ( ) [ 0 ] ); }
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }		
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "3°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "37°0", "7°0", Operator.test_system, true ).equals ( "2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3159°2", "7°0", Operator.test_system, true ).equals ( "4" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3°0", "0°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "3°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "37°0", "7°2", Operator.test_system, true ).equals ( "37" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3159°3", "7°2", Operator.test_system, true ).equals ( "600" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_Rest_DN extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( Operator.compareNumbersWithPointAndTenPow ( number_1, number_2, true, system_numeration ) < 0 )  return number_1;
			
			String [ ] str_array_1 = Operation.getAllParts ( number_1, system_numeration );
			String [ ] str_array_2 = Operation.getAllParts ( number_2, system_numeration );
			String difference = this.subtract.arithmeticOperation ( str_array_1 [ 2 ], str_array_2 [ 2 ], system_numeration, false );
			boolean up = false;
			String new_value_1 = str_array_1 [ 0 ],  new_value_2 = str_array_2 [ 0 ];
			if ( difference.indexOf ( SystemNumeration.MINUS ) != -1 )  { up = true;  difference = difference.replaceFirst ( SystemNumeration.MINUS, "" );  new_value_1 = Operation.addZeros ( new_value_1, difference, system_numeration ); }  else  new_value_2 = Operation.addZeros ( new_value_2, difference, system_numeration );
			this.result = this.rest.arithmeticOperation ( new_value_1, new_value_2, system_numeration, false ).concat ( SystemNumeration.DEGREE_NEGATIVE.concat ( system_numeration.isZero ( str_array_1 [ 2 ] ) ? str_array_2 [ 2 ] : str_array_1 [ 2 ] ) );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "3¯0", Operator.test_system, true ).equals ( "0¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "37¯0", "7¯0", Operator.test_system, true ).equals ( "2¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3159¯2", "7¯0", Operator.test_system, true ).equals ( "359¯2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3¯0", "0¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "3¯2", Operator.test_system, true ).equals ( "0¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "37¯0", "7¯2", Operator.test_system, true ).equals ( "4¯2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3159¯3", "7¯2", Operator.test_system, true ).equals ( "9¯3" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3159¯4", "7¯2", Operator.test_system, true ).equals ( "359¯4" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3159¯4", "7¯0", Operator.test_system, true ).equals ( "3159¯4" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "7¯2", "3159¯3", Operator.test_system, true ).equals ( "7¯2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_Rest_DN extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			try
			{
				String [ ] str_array = Operation.getAllParts ( number_2, system_numeration );
				number_1 = Operation.getFullInteger ( number_1, system_numeration );
				number_1 = Operation.addZeros ( number_1, str_array [ 2 ], system_numeration );
				this.result = this.rest.arithmeticOperation ( number_1, str_array [ 0 ], system_numeration, false ).concat ( SystemNumeration.DEGREE_NEGATIVE.concat (str_array [ 2 ]  ) );
			}
			catch ( IllegalArgumentException ex )  { out.println ( ex.getMessage ( ) + new Throwable ( ).getStackTrace ( ) [ 0 ] ); }
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "3¯0", Operator.test_system, true ).equals ( "0¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "37°0", "7¯0", Operator.test_system, true ).equals ( "2¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3159°2", "7¯0", Operator.test_system, true ).equals ( "4¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3°0", "0¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "3¯2", Operator.test_system, true ).equals ( "000¯2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "37°0", "7¯2", Operator.test_system, true ).equals ( "4¯2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3159°3", "7¯2", Operator.test_system, true ).equals ( "3¯2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3159°4", "7¯2", Operator.test_system, true ).equals ( "2¯2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3159°4", "7¯0", Operator.test_system, true ).equals ( "1¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "7°2", "3159¯3", Operator.test_system, true ).equals ( "1861¯3" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_Rest_D extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] str_array = Operation.getAllParts ( number_1, system_numeration );
			number_2 = Operation.getFullInteger ( number_2, system_numeration );
			number_2 = Operation.addZeros ( number_2, str_array [ 2 ], system_numeration );
			this.result = this.rest.arithmeticOperation ( str_array [ 0 ], number_2, system_numeration, false ).concat ( SystemNumeration.DEGREE_NEGATIVE.concat ( str_array [ 2 ] )  );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3¯0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "3°0", Operator.test_system, true ).equals ( "0¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "37¯0", "7°0", Operator.test_system, true ).equals ( "2¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3159¯2", "7°0", Operator.test_system, true ).equals ( "359¯2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°2", Operator.test_system, true ).equals ( "0¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3¯0", "0°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "3°2", Operator.test_system, true ).equals ( "0¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "37¯0", "7°2", Operator.test_system, true ).equals ( "37¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3159¯3", "7°2", Operator.test_system, true ).equals ( "3159¯3" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3159¯4", "7°2", Operator.test_system, true ).equals ( "3159¯4" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3159¯4", "7°0", Operator.test_system, true ).equals ( "3159¯4" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "7¯2", "3159°3", Operator.test_system, true ).equals ( "7¯2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class Percent_D extends Operator 
{
    static private String degree_symbol = SystemNumeration.DEGREE;

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] str_array = Operation.getAllParts ( number_2, system_numeration );
			this.result = this.multiply.arithmeticOperation ( number_1, str_array [ 0 ], system_numeration, false );
			String degree = Operation.computeDegreeSubtract ( str_array [ 2 ], system_numeration.TWO, system_numeration );
			this.result = this.result.concat ( degree );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "3°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°0", Operator.test_system, true ).equals ( "1829¯2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°2", Operator.test_system, true ).equals ( "1829" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°1", Operator.test_system, true ).equals ( "1829¯1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class Percent_DN extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] str_array = Operation.getAllParts ( number_2, system_numeration );
			this.result = this.multiply.arithmeticOperation ( number_1, str_array [ 0 ], system_numeration, false );
			String degree = this.summary.arithmeticOperation ( system_numeration.TWO, str_array [ 2 ], system_numeration, false );
			this.result = this.result.concat ( SystemNumeration.DEGREE_NEGATIVE.concat ( degree ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "3¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯0", Operator.test_system, true ).equals ( "1829¯2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯2", Operator.test_system, true ).equals ( "1829¯4" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯1", Operator.test_system, true ).equals ( "1829¯3" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_Percent extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			try
			{
				String [ ] str_array = Operation.getAllParts ( number_1, system_numeration );
				this.result = this.multiply.arithmeticOperation ( str_array [ 0 ], number_2, system_numeration, false ).concat ( Operation.computeDegreeSubtract ( str_array [ 2 ], system_numeration.TWO, system_numeration ) );
				if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
				this.outputResult ( print_calling );			
			}
			catch ( IllegalArgumentException ex )  { out.println ( ex.getMessage ( ) + new Throwable ( ).getStackTrace ( ) [ 0 ] ); }
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59", Operator.test_system, true ).equals ( "1829¯2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "59", Operator.test_system, true ).equals ( "1829" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°1", "59", Operator.test_system, true ).equals ( "1829¯1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_Percent extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] str_array = Operation.getAllParts ( number_1, system_numeration );
			this.result = this.multiply.arithmeticOperation ( str_array [ 0 ], number_2, system_numeration, false );
			String degree = this.summary.arithmeticOperation ( str_array [ 2 ], system_numeration.TWO, system_numeration, false );
			this.result = this.result.concat ( SystemNumeration.DEGREE_NEGATIVE.concat ( degree ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59", Operator.test_system, true ).equals ( "1829¯2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯2", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯2", "59", Operator.test_system, true ).equals ( "1829¯4" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯1", "59", Operator.test_system, true ).equals ( "1829¯3" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_Percent_D extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			String [ ] str_array_1 = Operation.getAllParts ( number_1, system_numeration );
			String [ ] str_array_2 = Operation.getAllParts ( number_2, system_numeration );
			this.result = this.multiply.arithmeticOperation ( str_array_1 [ 0 ], str_array_2 [ 0 ], system_numeration, false );
			String degree = this.summary.arithmeticOperation ( str_array_1 [ 2 ], str_array_2 [ 2 ], system_numeration, false );
			degree = Operation.computeDegreeSubtract ( degree, system_numeration.TWO, system_numeration ); 
			this.result = this.result.concat ( degree );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		this.outputResult ( print_calling );
		return this.result;		
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°4", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59°0", Operator.test_system, true ).equals ( "1829¯2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59°3", Operator.test_system, true ).equals ( "1829°1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°4", "59°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°3", Operator.test_system, true ).equals ( "1829°6" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°7", Operator.test_system, true ).equals ( "1829°10" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_Percent_DN extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] str_array_1 = Operation.getAllParts ( number_1, system_numeration );
			String [ ] str_array_2 = Operation.getAllParts ( number_2, system_numeration );
			this.result = this.multiply.arithmeticOperation ( str_array_1 [ 0 ], str_array_2 [ 0 ], system_numeration, false );
			String degree = this.summary.arithmeticOperation ( str_array_1 [ 2 ], str_array_2 [ 2 ], system_numeration, false );
			degree = this.summary.arithmeticOperation ( degree, system_numeration.TWO, system_numeration, false );
			this.result = this.result.concat ( SystemNumeration.DEGREE_NEGATIVE.concat ( degree ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯4", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59¯0", Operator.test_system, true ).equals ( "1829¯2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59¯3", Operator.test_system, true ).equals ( "1829¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯4", "59¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59¯3", Operator.test_system, true ).equals ( "1829¯10" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59¯7", Operator.test_system, true ).equals ( "1829¯14" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_Percent_DN extends Operator 
{
    private String degree_symbol = SystemNumeration.DEGREE_NEGATIVE;

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] str_array_1 = Operation.getAllParts ( number_1, system_numeration );
			String [ ] str_array_2 = Operation.getAllParts ( number_2, system_numeration );
			this.result = this.multiply.arithmeticOperation ( str_array_1 [ 0 ], str_array_2 [ 0 ], system_numeration, false );
			String degree = this.summary.arithmeticOperation ( str_array_2 [ 2 ], system_numeration.TWO, system_numeration, false );
			degree = Operation.computeDegreeSubtract ( str_array_1 [ 2 ], degree, system_numeration );
			this.result = this.result.concat ( degree );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°4", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59¯0", Operator.test_system, true ).equals ( "1829¯2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59¯3", Operator.test_system, true ).equals ( "1829¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°4", "59¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯3", Operator.test_system, true ).equals ( "1829" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯7", Operator.test_system, true ).equals ( "1829¯4" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_Percent_D extends Operator 
{
	DN_Percent_D ( )  { this.operation = Operation.d_percent_dn; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] str_array_1 = Operation.getAllParts ( number_1, system_numeration );
			String [ ] str_array_2 = Operation.getAllParts ( number_2, system_numeration );
			this.result = this.multiply.arithmeticOperation ( str_array_1 [ 0 ], str_array_2 [ 0 ], system_numeration, false );
			String degree = this.summary.arithmeticOperation ( str_array_1 [ 2 ], system_numeration.TWO, system_numeration, false );
			degree = Operation.computeDegreeSubtract ( str_array_2 [ 2 ], degree, system_numeration );
			this.result = this.result.concat ( degree );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯4", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59°0", Operator.test_system, true ).equals ( "1829¯2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59°3", Operator.test_system, true ).equals ( "1829°1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯4", "59°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59°3", Operator.test_system, true ).equals ( "1829¯4" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59°7", Operator.test_system, true ).equals ( "1829" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class Pow_D extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			try
			{
				String number = Operation.getFullInteger ( number_2, system_numeration );
				this.result = this.pow.arithmeticOperation ( number_1, number, system_numeration, false );
				this.outputResult ( print_calling );			
			}
			catch ( IllegalArgumentException ex )  { out.println ( ex.getMessage ( ) + new Throwable ( ).getStackTrace ( ) [ 0 ] ); }
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "31°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "5°0", Operator.test_system, true ).equals ( "28629151" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3", "2°1", Operator.test_system, true ).equals ( "3486784401" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3", "1°2", Operator.test_system, true ).equals ( "515377520732011331036461129765621272702107522001" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class Pow_DN extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] str_array = Operation.getAllParts ( number_2, system_numeration );
			this.result = this.pow.arithmeticOperation ( number_1, str_array [ 0 ], system_numeration, false );
			String degree = Operation.addZeros ( system_numeration.ONE, str_array [ 2 ], system_numeration );
			this.result = this.root.arithmeticOperation ( degree, this.result, system_numeration, false );
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }

		this.outputResult ( print_calling );
		return this.result;		
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "31¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "5¯0", Operator.test_system, true ).equals ( "28629151" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3", "2¯1", Operator.test_system, true ).equals ( "12457309396¯10" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3", "1¯2", Operator.test_system, true ).equals ( "10110466919¯10¯" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_Pow extends Operator 
{
	D_Pow ( )  { this.operation = new DN_Pow ( SystemNumeration.DEGREE ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°2", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "5", Operator.test_system, true ).equals ( "28629151" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3°1", "2", Operator.test_system, true ).equals ( "9°2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3°2", "1", Operator.test_system, true ).equals ( "3°2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_Pow extends Operator 
{
    private String degree_symbol = SystemNumeration.DEGREE_NEGATIVE;

    DN_Pow ( ) { }
    DN_Pow ( String degree_symbol ) { this.degree_symbol = degree_symbol; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] str_array = Operation.getAllParts ( number_1, system_numeration );
			String degree = this.multiply.arithmeticOperation ( str_array [ 2 ], number_2, system_numeration, false );
			this.result = this.pow.arithmeticOperation ( str_array [ 0 ], number_2, system_numeration, false ).concat ( ! degree.equals ( system_numeration.ZERO ) ? this.degree_symbol.concat ( degree ) : "" );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯2", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "5", Operator.test_system, true ).equals ( "28629151" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯2", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3¯1", "2", Operator.test_system, true ).equals ( "9¯2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3¯2", "1", Operator.test_system, true ).equals ( "3¯2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_Pow_D extends Operator 
{
	D_Pow_D ( )  { this.operation = new D_Pow ( ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			try
			{
				String [ ] str_array_1 = Operation.getAllParts ( number_1, system_numeration );
				String [ ] str_array_2 = Operation.getAllParts ( number_2, system_numeration );
				String ten_pow = Operation.getFullInteger ( number_2, system_numeration );
				this.result = this.pow.arithmeticOperation ( str_array_1 [ 0 ], ten_pow, system_numeration, false );
				ten_pow = this.multiply.arithmeticOperation ( str_array_1 [ 2 ], ten_pow, system_numeration, false );
				this.result = this.result.concat ( ( ! ten_pow.equals ( system_numeration.ZERO ) ? SystemNumeration.DEGREE.concat ( ten_pow ) : "" ) );
				this.outputResult ( print_calling );			
			}
			catch ( IllegalArgumentException ex )  { out.println ( ex.getMessage ( ) + new Throwable ( ).getStackTrace ( ) [ 0 ] ); }
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "5°0", Operator.test_system, true ).equals ( "28629151" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "2°2", Operator.test_system, true ).equals ( "0°1000" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "2°2", Operator.test_system, true ).equals ( "18721419156117085643309020314034722953756941552690871194883772896065563963013729338302445699953864296881883984573903115251197386648358983421336483955871016676204510156889016733768447594366506645085870879149770573729724511821958851354585343609252844526803103182803127247579503532379681881523461216001" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°1", "2°2", Operator.test_system, true ).equals ( "18721419156117085643309020314034722953756941552690871194883772896065563963013729338302445699953864296881883984573903115251197386648358983421336483955871016676204510156889016733768447594366506645085870879149770573729724511821958851354585343609252844526803103182803127247579503532379681881523461216001°200" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_Pow_DN extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] str_array_1 = Operation.getAllParts ( number_1, system_numeration );
			String [ ] str_array_2 = Operation.getAllParts ( number_2, system_numeration );

			String root_pow = Operation.addZeros ( system_numeration.ONE, str_array_2 [ 2 ], system_numeration );

			this.result = this.pow.arithmeticOperation ( str_array_1 [ 0 ], str_array_2 [ 0 ], system_numeration, false );
			this.result = this.root.arithmeticOperation ( root_pow, this.result, system_numeration, false );

			this.result = Operation.makePowByTenFromPoint ( this.result, system_numeration );
			if ( ! system_numeration.isZero ( str_array_1 [ 2 ] ) )
			{
				String ten_pow = this.multiply.arithmeticOperation ( str_array_1 [ 2 ], str_array_2 [ 0 ], system_numeration, false );
				ten_pow = Operation.rootOfTenPow ( root_pow, ten_pow, system_numeration );
				String [ ] number_array = Operation.getAllParts ( this.result, system_numeration );
				String [ ] ten_pow_array = Operation.getAllParts ( ten_pow, system_numeration );

				this.result = this.divide.arithmeticOperation ( number_array [ 0 ], ten_pow_array [ 0 ], system_numeration, false );				
			}

			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "5¯0", Operator.test_system, true ).equals ( "28629151" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "2¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "2¯2", Operator.test_system, true ).equals ( "10710931303¯10¯" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯1", "2¯2", Operator.test_system, true ).equals ( "10228859984¯10¯" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_Pow_DN extends Operator 
{
	D_Pow_DN ( )  { this.operation = new Pow_DN ( ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			try
			{
				String number = Operation.getFullInteger ( number_1, system_numeration );
				this.result = this.operation.arithmeticOperation ( number, number_2, system_numeration, false );
				this.outputResult ( print_calling );			
			}
			catch ( IllegalArgumentException ex )  { out.println ( ex.getMessage ( ) + new Throwable ( ).getStackTrace ( ) [ 0 ] ); }
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "5¯0", Operator.test_system, true ).equals ( "28629151" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "2¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "2¯2", Operator.test_system, true ).equals ( "10710931303¯10¯" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°1", "2¯2", Operator.test_system, true ).equals ( "11215721943¯10¯" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_Pow_D extends Operator 
{
	DN_Pow_D ( )  { this.operation = new DN_Pow ( ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			try
			{
				String number = Operation.getFullInteger ( number_2, system_numeration );
				this.result = this.operation.arithmeticOperation ( number_1, number, system_numeration, false );
				this.outputResult ( print_calling );			
			}
			catch ( IllegalArgumentException ex )  { out.println ( ex.getMessage ( ) + new Throwable ( ).getStackTrace ( ) [ 0 ] ); }
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "5°0", Operator.test_system, true ).equals ( "28629151" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "2°2", Operator.test_system, true ).equals ( "0¯1000" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "2°2", Operator.test_system, true ).equals ( "18721419156117085643309020314034722953756941552690871194883772896065563963013729338302445699953864296881883984573903115251197386648358983421336483955871016676204510156889016733768447594366506645085870879149770573729724511821958851354585343609252844526803103182803127247579503532379681881523461216001" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯1", "2°2", Operator.test_system, true ).equals ( "18721419156117085643309020314034722953756941552690871194883772896065563963013729338302445699953864296881883984573903115251197386648358983421336483955871016676204510156889016733768447594366506645085870879149770573729724511821958851354585343609252844526803103182803127247579503532379681881523461216001¯200" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class Multiply_D extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] str_array = Operation.getAllParts ( number_2, system_numeration );
			this.result = Operation.multiply.arithmeticOperation ( number_1, str_array [ 0 ], system_numeration, false ).concat ( str_array [ 1 ].concat ( str_array [ 2 ] ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		this.outputResult ( print_calling );
		return this.result;	
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°0", Operator.test_system, true ).equals ( "1829°0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°5", Operator.test_system, true ).equals ( "1829°5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°10", Operator.test_system, true ).equals ( "1829°10" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class Multiply_DN extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] str_array = Operation.getAllParts ( number_2, system_numeration );
			this.result = this.multiply.arithmeticOperation ( number_1, str_array [ 0 ], system_numeration, false ).concat ( SystemNumeration.DEGREE_NEGATIVE.concat ( str_array [ 2 ] ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		this.outputResult ( print_calling );
		return this.result;
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯0", Operator.test_system, true ).equals ( "1829¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯5", Operator.test_system, true ).equals ( "1829¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯10", Operator.test_system, true ).equals ( "1829¯10" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_Multiply extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] str_array = Operation.getAllParts ( number_1, system_numeration );
			this.result = this.multiply.arithmeticOperation ( str_array [ 0 ], number_2, system_numeration, false ).concat ( SystemNumeration.DEGREE.concat ( str_array [ 2 ] ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		this.outputResult ( print_calling );
		return this.result;	
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59", Operator.test_system, true ).equals ( "1829°0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59", Operator.test_system, true ).equals ( "1829°5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°10", "59", Operator.test_system, true ).equals ( "1829°10" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_Multiply extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] str_array = Operation.getAllParts ( number_1, system_numeration );
			this.result = this.multiply.arithmeticOperation ( str_array [ 0 ], number_2, system_numeration, false ).concat ( SystemNumeration.DEGREE_NEGATIVE.concat ( str_array [ 2 ] ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59", Operator.test_system, true ).equals ( "1829¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59", Operator.test_system, true ).equals ( "1829¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯10", "59", Operator.test_system, true ).equals ( "1829¯10" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_Multiply_D extends Operator 
{
    private String degree_symbol = SystemNumeration.DEGREE;

    D_Multiply_D ( ) { }
    D_Multiply_D ( String degree_symbol ) { this.degree_symbol = degree_symbol; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] str_array_1 = Operation.getAllParts ( number_1, system_numeration );
			String [ ] str_array_2 = Operation.getAllParts ( number_2, system_numeration );
			this.result = this.multiply.arithmeticOperation ( str_array_1 [ 0 ], str_array_2 [ 0 ], system_numeration, false );
			String degree = this.summary.arithmeticOperation ( str_array_1 [ 2 ], str_array_2 [ 2 ], system_numeration, false );
			this.result = this.result.concat ( this.degree_symbol.concat ( degree ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		this.outputResult ( print_calling );
		return this.result;	
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59°0", Operator.test_system, true ).equals ( "1829°0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°6", Operator.test_system, true ).equals ( "1829°11" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_Multiply_DN extends Operator 
{
	DN_Multiply_DN ( )  { this.operation = new D_Multiply_D ( SystemNumeration.DEGREE_NEGATIVE ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		this.outputResult ( print_calling );
		return this.result;	
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59¯0", Operator.test_system, true ).equals ( "1829¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59¯6", Operator.test_system, true ).equals ( "1829¯11" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_Multiply_DN extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String degree_symbol = SystemNumeration.DEGREE;
			String [ ] str_array_1 = Operation.getAllParts ( number_1, system_numeration );
			String [ ] str_array_2 = Operation.getAllParts ( number_2, system_numeration );
			this.result = this.multiply.arithmeticOperation ( str_array_1 [ 0 ], str_array_2 [ 0 ], system_numeration, false );
			String degree = this.subtract.arithmeticOperation ( str_array_1 [ 2 ], str_array_2 [ 2 ], system_numeration, false );
			if ( SystemNumeration.isNegative ( degree ) ) { degree_symbol = SystemNumeration.DEGREE_NEGATIVE;  degree = degree.replaceFirst ( SystemNumeration.MINUS, "" ); }
			this.result = this.result.concat ( degree_symbol.concat ( degree ) );
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		this.outputResult ( print_calling );
		return this.result;	
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "0°0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯0", Operator.test_system, true ).equals ( "0°0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "0°5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "59¯0", Operator.test_system, true ).equals ( "0°0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯5", Operator.test_system, true ).equals ( "0¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59¯0", Operator.test_system, true ).equals ( "1829°0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯0", Operator.test_system, true ).equals ( "0°0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯5", Operator.test_system, true ).equals ( "0¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "59¯0", Operator.test_system, true ).equals ( "0°5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯5", Operator.test_system, true ).equals ( "0°0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯6", Operator.test_system, true ).equals ( "1829¯1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°7", "59¯6", Operator.test_system, true ).equals ( "1829°1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_Multiply_D extends Operator 
{
	DN_Multiply_D ( )  { this.operation =  Operation.d_multiply_dn; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_2, number_1, system_numeration, false );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		this.outputResult ( print_calling );
		return this.result;	
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59°0", Operator.test_system, true ).equals ( "1829°0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59°6", Operator.test_system, true ).equals ( "1829°1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯7", "59°6", Operator.test_system, true ).equals ( "1829¯1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class Divide_D extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws ArithmeticException,  NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] str_array = Operation.getAllParts ( number_2, system_numeration );
			this.result = this.divide.arithmeticOperation ( number_1, str_array [ 0 ], system_numeration, false ).concat ( SystemNumeration.DEGREE_NEGATIVE.concat ( str_array [ 2 ] ) );
			this.result = Operation.reunitNeighboringTenPow ( this.result, system_numeration );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new ArithmeticException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }		
		
		this.outputResult ( print_calling );
		return this.result;	
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "11°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°6", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "11°0", Operator.test_system, true ).equals ( "28181818181¯10" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0°6", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "11°6", Operator.test_system, true ).equals ( "28181818181¯16" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°6", Operator.test_system, true ).equals ( "52542372881¯17" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class Divide_DN extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws ArithmeticException,  NullPointerException  // Логика в том, что первое число будет с начало умножено на степень десяточной части второго числа, уж после делится на целой части этого же второго числа
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] str_array = Operation.getAllParts ( number_2, system_numeration );
			this.result = Operation.divide.arithmeticOperation ( number_1, str_array [ 0 ], system_numeration, false ).concat ( SystemNumeration.DEGREE.concat ( str_array [ 2 ] ) );
			this.result = Operation.reunitNeighboringTenPow ( this.result, system_numeration );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new ArithmeticException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }		
		
		this.outputResult ( print_calling );
		return this.result;
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "11¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯6", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "11¯0", Operator.test_system, true ).equals ( "28181818181¯10" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0¯6", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "11¯6", Operator.test_system, true ).equals ( "28181818181¯4" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯6", Operator.test_system, true ).equals ( "52542372881¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_Divide extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws ArithmeticException,  NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] str_array = Operation.getAllParts ( number_1, system_numeration );
			this.result = Operation.divide.arithmeticOperation ( str_array [ 0 ], number_2, system_numeration, false ).concat ( SystemNumeration.DEGREE.concat ( str_array [ 2 ] ) );
			this.result = Operation.reunitNeighboringTenPow ( this.result, system_numeration );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new ArithmeticException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }		
		
		this.outputResult ( print_calling );
		return this.result;	

    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "11", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°6", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "11", Operator.test_system, true ).equals ( "28181818181¯10" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°6", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°6", "11", Operator.test_system, true ).equals ( "28181818181¯4" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°6", "59", Operator.test_system, true ).equals ( "52542372881¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_Divide extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws ArithmeticException,  NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] str_array_1 = Operation.getAllParts ( number_1, system_numeration );
			this.result = Operation.divide.arithmeticOperation ( str_array_1 [ 0 ], number_2, system_numeration, false );
			String [ ] str_array_2 = Operation.getAllParts ( this.result, system_numeration );
			String degree = this.summary.arithmeticOperation ( str_array_2 [ 2 ], str_array_1 [ 2 ], system_numeration, false );
			this.result = str_array_2 [ 0 ].concat ( SystemNumeration.DEGREE_NEGATIVE.concat ( degree ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new ArithmeticException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }		
		
		this.outputResult ( print_calling );
		return this.result;	
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "11", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯6", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "11", Operator.test_system, true ).equals ( "28181818181¯10" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯6", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯6", "11", Operator.test_system, true ).equals ( "28181818181¯16" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯6", "59", Operator.test_system, true ).equals ( "52542372881¯17" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_Divide_D extends Operator 
{
    private String degree_symbol = SystemNumeration.DEGREE;
    private String degree_symbol_contrariwise = SystemNumeration.DEGREE_NEGATIVE;

    D_Divide_D ( ) { }
    D_Divide_D ( String nothng )
    {
        this.degree_symbol = SystemNumeration.DEGREE_NEGATIVE;
        this.degree_symbol_contrariwise = SystemNumeration.DEGREE;
    }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws ArithmeticException,  NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] str_array_1 = Operation.getAllParts ( number_1, system_numeration );
			String [ ] str_array_2 = Operation.getAllParts ( number_2, system_numeration );
			String degree = Operation.subtract.arithmeticOperation ( str_array_1 [ 2 ], str_array_2 [ 2 ], system_numeration, false );
			String symbol = this.degree_symbol;
			if ( SystemNumeration.isNegative ( degree ) ) { symbol = this.degree_symbol_contrariwise;  degree = degree.replaceFirst ( SystemNumeration.MINUS, "" ); }
			this.result = Operation.divide.arithmeticOperation ( str_array_1 [ 0 ], str_array_2 [ 0 ], system_numeration, false ).concat ( symbol.concat ( degree ) );
			this.result = Operation.reunitNeighboringTenPow ( this.result, system_numeration );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new ArithmeticException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }		
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59°0", Operator.test_system, true ).equals ( "52542372881¯11" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63°0", "59°0", Operator.test_system, true ).equals ( "10677966101¯10" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59°7", Operator.test_system, true ).equals ( "52542372881¯18" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "59°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°8", Operator.test_system, true ).equals ( "52542372881¯14" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63°5", "59°7", Operator.test_system, true ).equals ( "10677966101¯12" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_Divide_DN extends Operator 
{
	DN_Divide_DN ( )  { this.operation = new D_Divide_D ( null ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws ArithmeticException,  NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.result = Operation.reunitNeighboringTenPow ( this.result, system_numeration );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new ArithmeticException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }		
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59¯0", Operator.test_system, true ).equals ( "52542372881¯11" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63¯0", "59¯0", Operator.test_system, true ).equals ( "10677966101¯10" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59¯7", Operator.test_system, true ).equals ( "52542372881¯4" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "59¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59¯8", Operator.test_system, true ).equals ( "52542372881¯8" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63¯5", "59¯7", Operator.test_system, true ).equals ( "10677966101¯8" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_Divide_DN extends Operator 
{
    private String degree_symbol = SystemNumeration.DEGREE;

    D_Divide_DN ( ) { }
    D_Divide_DN ( String nothng )  { this.degree_symbol = SystemNumeration.DEGREE_NEGATIVE; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws ArithmeticException,  NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] str_array_1 = Operation.getAllParts ( number_1, system_numeration );
			String [ ] str_array_2 = Operation.getAllParts ( number_2, system_numeration );
			String degree = Operation.summary.arithmeticOperation ( str_array_1 [ 2 ], str_array_2 [ 2 ], system_numeration, false );
			this.result = Operation.divide.arithmeticOperation ( str_array_1 [ 0 ], str_array_2 [ 0 ], system_numeration, false ).concat ( this.degree_symbol.concat ( degree ) );
			this.result = Operation.reunitNeighboringTenPow ( this.result, system_numeration );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new ArithmeticException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }		
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯7", Operator.test_system, true ).equals ( "0¯7" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59¯0", Operator.test_system, true ).equals ( "52542372881¯11" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63°0", "59¯0", Operator.test_system, true ).equals ( "10677966101¯10" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59¯7", Operator.test_system, true ).equals ( "52542372881¯4" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "59¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯7", Operator.test_system, true ).equals ( "52542372881°1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63°5", "59¯7", Operator.test_system, true ).equals ( "10677966101°2" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_Divide_D extends Operator 
{
	DN_Divide_D ( )  { this.operation = new D_Divide_DN ( null ); }
	
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws ArithmeticException,  NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.result = Operation.reunitNeighboringTenPow ( this.result, system_numeration );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new ArithmeticException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }		
		
		this.outputResult ( print_calling );
		return this.result;
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59°0", Operator.test_system, true ).equals ( "52542372881¯11" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63¯0", "59°0", Operator.test_system, true ).equals ( "10677966101¯10" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59°7", Operator.test_system, true ).equals ( "52542372881¯18" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "59°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59°7", Operator.test_system, true ).equals ( "52542372881¯23" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63¯5", "59°7", Operator.test_system, true ).equals ( "10677966101¯22" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class Subtract_D extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			try
			{
				String number = Operation.getFullInteger ( number_2, system_numeration );
				this.result = this.subtract.arithmeticOperation ( number_1, number, system_numeration, false );
				this.outputResult ( print_calling );			
			}
			catch ( IllegalArgumentException ex )  { out.println ( ex.getMessage ( ) + new Throwable ( ).getStackTrace ( ) [ 0 ] ); }
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0°0", Operator.test_system, true ).equals ( "31" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "59°0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "59" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "28" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63", "59°0", Operator.test_system, true ).equals ( "4" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0°5", Operator.test_system, true ).equals ( "31" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°5", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "5899969" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63", "59°5", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "5899937" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class Subtract_DN extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] str_array = Operation.getAllParts ( number_2, system_numeration );
			number_1 = Operation.addZeros ( number_1, str_array [ 2 ], system_numeration );
			this.result = this.subtract.arithmeticOperation ( number_1, str_array [ 0 ], system_numeration, false ).concat ( SystemNumeration.DEGREE_NEGATIVE.concat ( str_array [ 2 ] ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0¯0", Operator.test_system, true ).equals ( "31¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "59¯0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "59¯0" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "28¯0" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63", "59¯0", Operator.test_system, true ).equals ( "4¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0¯5", Operator.test_system, true ).equals ( "3100000¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯5", Operator.test_system, true ).equals ( "3099941¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63", "59¯5", Operator.test_system, true ).equals ( "6299941¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_Subtract extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			try
			{
				String number = Operation.getFullInteger ( number_1, system_numeration );
				this.result = this.subtract.arithmeticOperation ( number, number_2, system_numeration, false );
				this.outputResult ( print_calling );			
			}
			catch ( IllegalArgumentException ex )  { out.println ( ex.getMessage ( ) + new Throwable ( ).getStackTrace ( ) [ 0 ] ); }
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0", Operator.test_system, true ).equals ( "31" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "59", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "59" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "28" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63°0", "59", Operator.test_system, true ).equals ( "4" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "0", Operator.test_system, true ).equals ( "3100000" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59", Operator.test_system, true ).equals ( "3099941" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63°5", "59", Operator.test_system, true ).equals ( "6299941" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_Subtract extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] str_array = Operation.getAllParts ( number_1, system_numeration );
			number_2 = Operation.addZeros ( number_2, str_array [ 2 ], system_numeration );
			number_1 = Operation.getAllParts ( number_1, system_numeration ) [ 0 ];
			this.result = this.subtract.arithmeticOperation ( number_1, number_2, system_numeration, false ).concat ( SystemNumeration.DEGREE_NEGATIVE.concat ( str_array [ 2 ] ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0", Operator.test_system, true ).equals ( "31¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "59", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "59¯0" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "28¯0" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63¯0", "59", Operator.test_system, true ).equals ( "4¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "0", Operator.test_system, true ).equals ( "31¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "5899969¯5" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63¯5", "59", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "5899937¯5" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_Subtract_D extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			try
			{
				String number__1 = Operation.getFullInteger ( number_1, system_numeration );
				String number__2 = Operation.getFullInteger ( number_2, system_numeration );
				this.result = this.subtract.arithmeticOperation ( number__1, number__2, system_numeration, false );
				this.result = Operation.optimazeByTenPow ( this.result, system_numeration );
				this.outputResult ( print_calling );			
			}
			catch ( IllegalArgumentException ex )  { out.println ( ex.getMessage ( ) + new Throwable ( ).getStackTrace ( ) [ 0 ] ); }
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°0", Operator.test_system, true ).equals ( "31" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°7", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "59°0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "59" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59°5", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "5899969" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63°0", "59°5", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "5899937" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "59°0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "59" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°7", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "5869°5" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°7", "59°5", Operator.test_system, true ).equals ( "3041°5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_Subtract_DN extends Operator 
{
	DN_Subtract_DN ( )  { this.operation = new DN_Summary_DN ( new Subtract ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		this.outputResult ( print_calling );
		return this.result;	
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "0¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0¯0", Operator.test_system, true ).equals ( "31¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯7", "0¯0", Operator.test_system, true ).equals ( "0¯7" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "59¯0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "59¯0" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯5", Operator.test_system, true ).equals ( "0¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59¯5", Operator.test_system, true ).equals ( "3099941¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63¯0", "59¯5", Operator.test_system, true ).equals ( "6299941¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "59¯0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "5900000¯5" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯7", Operator.test_system, true ).equals ( "0¯7" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59¯7", Operator.test_system, true ).equals ( "3041¯7" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯7", "59¯5", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "5869¯7" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_Subtract_DN extends Operator 
{
	D_Subtract_DN ( )  { this.operation = new Subtract_DN ( ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			try
			{
				String number = Operation.getFullInteger ( number_1, system_numeration );
				this.result = this.operation.arithmeticOperation ( number, number_2, system_numeration, false );
				if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
				this.outputResult ( print_calling );			
			}
			catch ( IllegalArgumentException ex )  { out.println ( ex.getMessage ( ) + new Throwable ( ).getStackTrace ( ) [ 0 ] ); }
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯0", Operator.test_system, true ).equals ( "31¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°7", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "59¯0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "59¯0" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59¯5", Operator.test_system, true ).equals ( "3099941¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63°0", "59¯5", Operator.test_system, true ).equals ( "6299941¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "59¯0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "59¯0" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯7", Operator.test_system, true ).equals ( "30999999999941¯7" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°7", "59¯5", Operator.test_system, true ).equals ( "30999999999941¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_Subtract_D extends Operator 
{
	DN_Subtract_D ( )  { this.operation = new DN_Subtract ( ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			try
			{
				String number = Operation.getFullInteger ( number_2, system_numeration );
				this.result = this.operation.arithmeticOperation ( number_1, number, system_numeration, false );
				if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
				this.outputResult ( print_calling );			
			}
			catch ( IllegalArgumentException ex )  { out.println ( ex.getMessage ( ) + new Throwable ( ).getStackTrace ( ) [ 0 ] ); }
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°0", Operator.test_system, true ).equals ( "31¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯7", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "59°0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "59¯0" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59°5", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "5899969¯0" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63¯0", "59°5", Operator.test_system, true ).equals (  SystemNumeration.MINUS.concat ( "5899937¯0" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "59°0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "5900000¯5" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59°7", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "58999999999969¯5" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯7", "59°5", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "58999999999969¯7" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class Summary_D extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
//			if ( system_numeration.isZero ( number_1 ) )  return number_2;  else if ( system_numeration.isZero ( number_2 ) )  return number_1;
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			try
			{
				String number = Operation.getFullInteger ( number_2, system_numeration );  // Второе число подменивается эквивалентным целым числом
				this.result = this.summary.arithmeticOperation ( number_1, number, system_numeration, false );
			}
			catch ( IllegalArgumentException ex )  { out.println ( ex.getMessage ( ) + new Throwable ( ).getStackTrace ( ) [ 0 ] ); }
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0°0", Operator.test_system, true ).equals ( "31" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "59°0", Operator.test_system, true ).equals ( "59" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "000000" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°0", Operator.test_system, true ).equals ( "90" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0°5", Operator.test_system, true ).equals ( "31" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°5", Operator.test_system, true ).equals ( "5900031" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class Summary_DN extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException  // Логика вычисления такого – первое оба числа принимают целочисленный вид, путем – к первому числу с конца добавлением нулевых символов в количестве, соответствующее отрицательной десяточной части второго числа, а второе число освобождается о своей десяточной части. Этот отрицательный десяточный степень, для получения ровного результата, прибавляется к результату вычисления
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
//			if ( system_numeration.isZero ( number_1 ) )  return number_2;  else if ( system_numeration.isZero ( number_2 ) )  return number_1;
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] array_str = Operation.getAllParts ( number_2, system_numeration );
			number_1 = Operation.addZeros ( number_1, array_str [ 2 ], system_numeration );  //
			this.result = this.summary.arithmeticOperation ( number_1, array_str [ 0 ], system_numeration, false ).concat ( SystemNumeration.DEGREE_NEGATIVE.concat ( array_str [ 2 ] ) );  // Этим выражением первое число обретает иной вид – с ее конца добавляются нулевые символы, в количестве, соответствующее отрицательной десяточной степени второго числа, при том что к результату добавляется отрицательный десяточный степень, соответствующий количеству добавляемых нулевых символов
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		this.outputResult ( print_calling );
		return this.result;
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "0¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0¯0", Operator.test_system, true ).equals ( "31¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "59¯0", Operator.test_system, true ).equals ( "59¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "0¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯0", Operator.test_system, true ).equals ( "90¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0¯5", Operator.test_system, true ).equals ( "3100000¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯5", Operator.test_system, true ).equals ( "3100059¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_Summary extends Operator 
{
    private Summary_D operation = new Summary_D ( );  // Этот элемент необходим для выполнения данной арифметической операции по нему, передавая имеющийся числовые аргументы в текстовом виде, в обратном порядке

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
//			if ( system_numeration.isZero ( number_1 ) )  return number_2;  else if ( system_numeration.isZero ( number_2 ) )  return number_1;
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_2, number_1, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0", Operator.test_system, true ).equals ( "31" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "59", Operator.test_system, true ).equals ( "59" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0", Operator.test_system, true ).equals ( "000000" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59", Operator.test_system, true ).equals ( "90" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "0", Operator.test_system, true ).equals ( "3100000" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59", Operator.test_system, true ).equals ( "3100059" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_Summary extends Operator 
{
    private Summary_DN operation = new Summary_DN ( );  // Этот элемент необходим для выполнения данной арифметической операции по нему, передавая имеющийся числовые аргументы в текстовом виде, в обратном порядке

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
//			if ( system_numeration.isZero ( number_1 ) )  return number_2;  else if ( system_numeration.isZero ( number_2 ) )  return number_1;
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_2, number_1, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "0¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0", Operator.test_system, true ).equals ( "31¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "59", Operator.test_system, true ).equals ( "59¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0", Operator.test_system, true ).equals ( "0¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59", Operator.test_system, true ).equals ( "90¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "0", Operator.test_system, true ).equals ( "31¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59", Operator.test_system, true ).equals ( "5900031¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_Summary_D extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
//			if ( system_numeration.isZero ( number_1 ) )  return number_2;  else if ( system_numeration.isZero ( number_2 ) )  return number_1;
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			// Предварительно оба числа принимают целочисленное текстовое представление
			try 
			{
				String number__1 = Operation.getFullInteger ( number_1, system_numeration );
				String number__2 = Operation.getFullInteger ( number_2, system_numeration );
				this.result = this.summary.arithmeticOperation ( number__1, number__2, system_numeration, false );
				this.result = Operation.optimazeByTenPow ( this.result, system_numeration );
				this.outputResult ( print_calling );			
			}
			catch ( IllegalArgumentException ex )  { out.println ( ex.getMessage ( ) + new Throwable ( ).getStackTrace ( ) [ 0 ] ); }
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°0", Operator.test_system, true ).equals ( "31" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "59°0", Operator.test_system, true ).equals ( "59" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°7", Operator.test_system, true ).equals ( "0°7" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59°5", Operator.test_system, true ).equals ( "5900031" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "59°0", Operator.test_system, true ).equals ( "59" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°7", Operator.test_system, true ).equals ( "0°7" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "0°0", Operator.test_system, true ).equals ( "31°5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°0", Operator.test_system, true ).equals ( "3100059" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "0°7", Operator.test_system, true ).equals ( "31°5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°7", Operator.test_system, true ).equals ( "5931°5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_Summary_DN extends Operator 
{
    private Operation operation = null;  // По этому элементу могут быть выполнены два типа арифметических операций – сложения и вычитания – зависимо от его создания – по классу ‘Summary’ или же ‘Subtract’. Этот элемент таким образом создается с целью быть вызванным в качестве элементом описания этого класса для выполнения операций вычитания двух чисел с отрицательными степенями десяточных частей

    DN_Summary_DN ( ) { this.operation = new Summary ( ); }
    DN_Summary_DN ( Operation operation ) { this.operation = operation; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
//			if ( system_numeration.isZero ( number_1 ) )  return number_2;  else if ( system_numeration.isZero ( number_2 ) )  return number_1;
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			// Эти выражения необходимо для выполнения вычисления над целыми частями обеих чисел отдельно, а над степенями их десяточных частей - отдельно
			String [ ] str_array_1 = Operation.getAllParts ( number_1, system_numeration );
			String [ ] str_array_2 = Operation.getAllParts ( number_2, system_numeration );
			// Это выражение определяет максимальный степень десяточной части одного из чисел, с целью прикрепить его к результату, по скольку подобное прикрепление исходит с логики данного арифметического выражения
			String max_number = system_numeration.getMaxMin ( str_array_1 [ 2 ], str_array_2 [ 2 ], true );
			// Этим выражением определяется разница между десяточными степенями обеих чисел, с целью добавления целой части одного из чисел конечных нулевых символов
			String difference = this.subtract.arithmeticOperation ( str_array_1 [ 2 ], str_array_2 [ 2 ], system_numeration, false );

			if ( difference.indexOf ( SystemNumeration.MINUS ) != -1 )  // В этом случае десяточный степень первого числа меньше десяточной степени второго числа, что означает – конечные нулевые символы будут добавлены к целой части первого числа
			{
				difference = difference.replaceFirst ( SystemNumeration.MINUS, "" );
				number_1 = Operation.addZeros ( str_array_1 [ 0 ], difference, system_numeration );
				this.result = this.operation.arithmeticOperation ( number_1, str_array_2 [ 0 ], system_numeration, false ).concat ( SystemNumeration.DEGREE_NEGATIVE.concat ( max_number ) );
			}
			else  // А в этом случае конечные символы будут добавлены к целой части второго числа
			{
				number_2 = Operation.addZeros ( str_array_2 [ 0 ], difference, system_numeration );
				this.result = this.operation.arithmeticOperation ( str_array_1 [ 0 ], number_2, system_numeration, false ).concat ( SystemNumeration.DEGREE_NEGATIVE.concat ( max_number ) );
			}
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		this.outputResult ( print_calling );
		return this.result;
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "0¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0¯0", Operator.test_system, true ).equals ( "31¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "000000¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "59¯0", Operator.test_system, true ).equals ( "59¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯7", Operator.test_system, true ).equals ( "0¯7" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59¯5", Operator.test_system, true ).equals ( "3100059¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "59¯0", Operator.test_system, true ).equals ( "5900000¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯7", Operator.test_system, true ).equals ( "0¯7" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "0¯0", Operator.test_system, true ).equals ( "31¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59¯0", Operator.test_system, true ).equals ( "5900031¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "0¯7", Operator.test_system, true ).equals ( "3100¯7" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59¯7", Operator.test_system, true ).equals ( "3159¯7" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_Summary_DN extends Operator 
{
    private Summary_DN operation = new Summary_DN ( );

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
//			if ( system_numeration.isZero ( number_1 ) )  return number_2;  else if ( system_numeration.isZero ( number_2 ) )  return number_1;
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			try 
			{
				String number = Operation.getFullInteger ( number_1, system_numeration );
				this.result = this.operation.arithmeticOperation ( number, number_2, system_numeration, false );
				this.outputResult ( print_calling );			
			}
			catch ( IllegalArgumentException ex )  { out.println ( ex.getMessage ( ) + new Throwable ( ).getStackTrace ( ) [ 0 ] ); }
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "0¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯0", Operator.test_system, true ).equals ( "31¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "0¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "59¯0", Operator.test_system, true ).equals ( "59¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯7", Operator.test_system, true ).equals ( "0¯7" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59¯5", Operator.test_system, true ).equals ( "3100059¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "59¯0", Operator.test_system, true ).equals ( "59¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯7", Operator.test_system, true ).equals ( "0¯7" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "0¯0", Operator.test_system, true ).equals ( "3100000¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯0", Operator.test_system, true ).equals ( "3100059¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "0¯7", Operator.test_system, true ).equals ( "31000000000000¯7" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯7", Operator.test_system, true ).equals ( "31000000000059¯7" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_Summary_D extends Operator 
{
    private DN_Summary operation = new DN_Summary ( );

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
//			if ( system_numeration.isZero ( number_1 ) )  return number_2;  else if ( system_numeration.isZero ( number_2 ) )  return number_1;
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			try 
			{
				number_2 = Operation.getFullInteger ( number_2, system_numeration );
				this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			}
			catch ( IllegalArgumentException ex )  { out.println ( ex.getMessage ( ) ); }
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "0¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°0", Operator.test_system, true ).equals ( "31¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°0", Operator.test_system, true ).equals ( "0¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "59°0", Operator.test_system, true ).equals ( "59¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°7", Operator.test_system, true ).equals ( "0¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59°5", Operator.test_system, true ).equals ( "5900031¯0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "59°0", Operator.test_system, true ).equals ( "5900000¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°7", Operator.test_system, true ).equals ( "0¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "0°0", Operator.test_system, true ).equals ( "31¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59°0", Operator.test_system, true ).equals ( "5900031¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "0°7", Operator.test_system, true ).equals ( "31¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59°7", Operator.test_system, true ).equals ( "59000000000031¯5" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

//--- Д Л Я   В Ы П О Л Н Е Н И Я   О П Е Р А Ц И Й   С   Т О Ч К О Й   И   С О   С Т Е П Е Н Ь Ю   Д Е С Я Т О Ч Н О Й   Ч А С Т И ---
class Point_D extends Operator 
{
    private String degree_symbol = SystemNumeration.DEGREE;
    private String degree_symbol_contrariwise = SystemNumeration.DEGREE_NEGATIVE;

    Point_D ( )  { this.operation = Operation.subtract; }
    Point_D ( int anything )
    {
        this.degree_symbol = SystemNumeration.DEGREE_NEGATIVE;
        this.degree_symbol_contrariwise = SystemNumeration.DEGREE;
        this.operation = Operation.summary;
    }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( system_numeration.isZero ( number_2 ) )  this.result = number_1;
			else
			{
				String [ ] str_array = Operation.getAllParts ( number_2, system_numeration );
				String difference = this.operation.arithmeticOperation ( str_array [ 2 ], String.valueOf ( str_array [ 0 ].length ( ) ), system_numeration, false );
				if ( SystemNumeration.isNegative ( difference ) )
				{
					this.degree_symbol = this.degree_symbol_contrariwise;
					difference = difference.replaceFirst ( SystemNumeration.MINUS, "" );
				}
				this.result = number_1.concat ( str_array [ 0 ] );
				if ( ! system_numeration.isZero ( difference ) )  this.result = this.result.concat ( degree_symbol.concat ( difference ).concat ( degree_symbol ) );
			}
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{

	}
}

class Point_DN extends Operator 
{
	Point_DN ( )  { this.operation = new Point_D ( 0 ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( system_numeration.isZero ( number_2 ) )  this.result = number_1;
			else  this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}
// --------------------------------

//--- Д Л Я   В Ы П О Л Н Е Н И Я   Л О Г И Ч Е С К И Х   О П Е Р А Ц И Й   С О   С Т Е П Е Н Ь Ю   Д Е С Я Т О Ч Н О Й   Ч А С Т И   И   Н А Д   П О Л О Ж И Т Е Л Ь Н Ы М И   О П Е Р А Н Д А М И ---
class Less_D extends Operator 
{
	Less_D ( )  { this.operation = this.less; }
	Less_D ( Operation operation )  { this.operation = operation; }
	
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			number_2 = Operation.getFullInteger ( number_2, system_numeration );
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		this.outputResult ( print_calling );
		return this.result;	
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31000", "59°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31000", "31°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31000", "31°4", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class LessOrEven_D extends Operator 
{
	LessOrEven_D ( )  { this.operation = new Less_D ( less_or_even ); }
	
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000", "31°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "2900000", "31°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5900000", "31°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class More_D extends Operator 
{
	More_D ( )  { this.operation = new Less_D ( this.more ); }
	
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MoreOrEven_D extends Operator 
{
	MoreOrEven_D ( )  { this.operation = new Less_D ( this.more_or_even ); }
	
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31000", "31°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class Even_D extends Operator 
{
	Even_D ( )  { this.operation = new Less_D ( this.even ); }
	
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000", "31°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class NotEven_D extends Operator 
{
	NotEven_D ( )  { this.operation = new Less_D ( this.not_even ); }
	
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000", "31°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class Less_DN extends Operator 
{
	Less_DN ( )  { this.operation = this.less; }
	Less_DN ( Operation operation )  { this.operation = operation; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] array = Operation.getAllParts ( number_2, system_numeration );
			number_1 = Operation.addZeros ( number_1, array [ 2 ], system_numeration );
			number_2 = array [ 0 ];
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31000000¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100", "3100000000¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class LessOrEven_DN extends Operator 
{
	LessOrEven_DN ( )  { this.operation = new Less_DN ( this.less_or_even ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "3100000¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "310", "3100000¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class More_DN extends Operator 
{
	More_DN ( )  { this.operation = new Less_DN ( this.more ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100", "31000¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "310", "31000¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100", "31000¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MoreOrEven_DN extends Operator 
{
	MoreOrEven_DN ( )  { this.operation = new Less_DN ( this.more_or_even ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "3100000¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31000000¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class Even_DN extends Operator 
{
	Even_DN ( )  { this.operation = Operation.even_d; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "3100000¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31000000¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "310", "31000000¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100", "31000000¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class NotEven_DN extends Operator 
{
	NotEven_DN ( )  { this.operation = Operation.not_even_d; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "3100000¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "310", "3100000¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class D_Less extends Operator 
{
	D_Less ( )  { this.operation = Operation.less; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			number_1 = Operation.getFullInteger ( number_1, system_numeration );
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "3100000", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31000000", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_LessOrEven extends Operator 
{
	D_LessOrEven ( )  { this.operation = Operation.less_or_even; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			number_1 = Operation.getFullInteger ( number_1, system_numeration );
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "3100000", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31000000", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_More extends Operator 
{
	D_More ( )  { this.operation = Operation.more; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			number_1 = Operation.getFullInteger ( number_1, system_numeration );
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "3100000", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_MoreOrEven extends Operator 
{
	D_MoreOrEven ( )  { this.operation = Operation.more_or_even; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			number_1 = Operation.getFullInteger ( number_1, system_numeration );
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "3100000", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_Even extends Operator 
{
	D_Even ( )  { this.operation = Operation.even; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			number_1 = Operation.getFullInteger ( number_1, system_numeration );
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "3100000", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_NotEven extends Operator 
{
	D_NotEven ( )  { this.operation = Operation.not_even; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			number_1 = Operation.getFullInteger ( number_1, system_numeration );
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "3100000", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31000000", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class DN_Less extends Operator 
{
	DN_Less ( )  { this.operation = Operation.less; }
	
	DN_Less ( Operation operator )  { this.operation = operator; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] array = Operation.getAllParts ( number_1, system_numeration );
			number_2 = Operation.addZeros ( number_2, array [ 2 ], system_numeration );
			number_1 = array [ 0 ];
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_LessOrEven extends Operator 
{
	DN_LessOrEven ( )  { this.operation = new DN_Less ( less_or_even ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_More extends Operator 
{
	DN_More ( )  { this.operation = new DN_Less ( more ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_MoreOrEven extends Operator 
{
	DN_MoreOrEven ( )  { this.operation = new DN_Less ( more_or_even ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_Even extends Operator 
{
	DN_Even ( )  { this.operation = new DN_Less ( even ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_NotEven extends Operator 
{
	DN_NotEven ( )  { this.operation = new DN_Less ( not_even ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class D_Less_D extends Operator 
{
	D_Less_D ( )  { this.operation = Operation.less_d; }
	
	D_Less_D ( Operation operation )  { this.operation = operation; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			number_1 = Operation.getFullInteger ( number_1, system_numeration );
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_LessOrEven_D extends Operator 
{
	D_LessOrEven_D ( )  { this.operation = new D_Less_D ( less_or_even_d ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_More_D extends Operator 
{
	D_More_D ( )  { this.operation = new D_Less_D ( more_d ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_MoreOrEven_D extends Operator 
{
	D_MoreOrEven_D ( )  { this.operation = new D_Less_D ( more_or_even_d ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_Even_D extends Operator 
{
	D_Even_D ( )  { this.operation = new D_Less_D ( even_d ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_NotEven_D extends Operator 
{
	D_NotEven_D ( )  { this.operation = new D_Less_D ( not_even_d ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class D_Less_DN extends Operator 
{
	D_Less_DN ( )  { this.operation = new Less_DN ( ); }
	
	D_Less_DN ( Operation operation )  { this.operation = operation; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			number_1 = Operation.getFullInteger ( number_1, system_numeration );
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		this.outputResult ( print_calling );
		return this.result;
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "29¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "29¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "5900000¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "3100000000¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_LessOrEven_DN extends Operator 
{
	D_LessOrEven_DN ( )  { this.operation = new D_Less_DN ( new LessOrEven_DN ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "29¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "29¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "5900000¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "3100000000¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_More_DN extends Operator 
{
	D_More_DN ( )  { this.operation = new D_Less_DN ( new More_DN ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );

			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );

			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "29¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "29¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "5900000¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "3100000000¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "310000000¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "31000000¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_MoreOrEven_DN extends Operator 
{
	D_MoreOrEven_DN ( )  { this.operation = new D_Less_DN ( new MoreOrEven_DN ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "29¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "29¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "5900000¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "3100000000¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "310000000¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "31000000¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_Even_DN extends Operator 
{
	D_Even_DN ( )  { this.operation = new D_Less_DN ( new Even_DN ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "29¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "29¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "5900000¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "3100000000¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "310000000¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_NotEven_DN extends Operator 
{
	D_NotEven_DN ( )  { this.operation = new D_Less_DN ( new NotEven_DN ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "29¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "29¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "5900000¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "3100000000¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "310000000¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class DN_Less_D extends Operator 
{
	DN_Less_D ( )  { this.operation = new  DN_Less ( ); }
	
	DN_Less_D ( Operation operation )  { this.operation = operation; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			number_2 = Operation.getFullInteger ( number_2, system_numeration );
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "29°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "29°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "59°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "31°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "310000000¯2", "31°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31000000¯2", "31°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_LessOrEven_D extends Operator 
{
	DN_LessOrEven_D ( )  { this.operation = new DN_Less_D ( new DN_LessOrEven ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "29°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "31°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "29°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "59°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "31°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_More_D extends Operator 
{
	DN_More_D ( )  { this.operation = new DN_Less_D ( new DN_More ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "29°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "31°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "29°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "59°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "31°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_MoreOrEven_D extends Operator 
{
	DN_MoreOrEven_D ( )  { this.operation = new DN_Less_D ( new DN_MoreOrEven ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "29°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "31°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "29°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "59°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "31°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_Even_D extends Operator 
{
	DN_Even_D ( )  { this.operation = new DN_Less_D ( new DN_Even ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "29°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "31°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "29°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "59°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "31°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_NotEven_D extends Operator 
{
	DN_NotEven_D ( )  { this.operation = new DN_Less_D ( new DN_NotEven ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "29°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "31°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "29°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "59°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "31°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class DN_Less_DN extends Operator 
{
	DN_Less_DN ( )  { this.operation = Operation.less; }
	
	DN_Less_DN ( Operation operation )  { this.operation = operation; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			String [ ] array_1 = Operation.getAllParts ( number_1, system_numeration );
			String [ ] array_2 = Operation.getAllParts ( number_2, system_numeration );
			number_1 = Operation.addZeros ( array_1 [ 0 ], array_2 [ 2 ], system_numeration );
			number_2 = Operation.addZeros ( array_2 [ 0 ], array_1 [ 2 ], system_numeration );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, true );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯0", "7¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯0", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯3", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯3", "5¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯7", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯3", "29¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯3", "29¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯7", "59¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
	}
}

class DN_LessOrEven_DN extends Operator 
{
	DN_LessOrEven_DN ( )  { this.operation = new DN_Less_DN ( less_or_even ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯0", "7¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯0", "0¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯3", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯3", "5¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯7", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯3", "29¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯3", "29¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯7", "59¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
	}
}

class DN_More_DN extends Operator 
{
	DN_More_DN ( )  { this.operation = new DN_Less_DN ( more ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯0", "7¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯0", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯3", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯3", "5¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯7", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯3", "29¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯3", "29¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯7", "59¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
	}
}

class DN_MoreOrEven_DN extends Operator 
{
	DN_MoreOrEven_DN ( )  { this.operation = new DN_Less_DN ( more_or_even ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯0", "7¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯0", "0¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯3", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯3", "5¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯7", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯3", "29¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯3", "29¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯7", "59¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
	}
}

class DN_Even_DN extends Operator 
{
	DN_Even_DN ( )  { this.operation = new DN_Less_DN ( even ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯0", "7¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯0", "0¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯3", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯3", "5¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯7", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯3", "29¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯3", "29¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯7", "59¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
	}
}

class DN_NotEven_DN extends Operator 
{
	DN_NotEven_DN ( )  { this.operation = new DN_Less_DN ( not_even ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯0", "7¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯0", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯3", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯3", "5¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯7", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯3", "29¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯3", "29¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯7", "59¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
	}
}
// --------------------------------

//--- Д Л Я   В Ы П О Л Н Е Н И Я   П Р О С Т Е Й Ш И Х   А Р И Ф М Е Т И Ч Е С К И Х   О П Е Р А Ц И Й   С  О Т Р И Ц А Т Е Л Ь Н Ы М   В Т О Р Ы М   О П Е Р А Н Д О М   И   С О   С Т Е П Е Н Ь Ю   Д Е С Я Т О Ч Н О Й   Ч А С Т И ---
class RootMinus_D extends Operator 
{
	RootMinus_D ( )  { this.operation = Operation.root_d; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws ArithmeticException, NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			if ( system_numeration.isZero ( this.result ) ) this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new NullPointerException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "9°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3", "0°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "2", "9°0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "3°0" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "2", "9°1", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "94868329803¯10" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3", "7°4", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "412128529959160786300¯19" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class RootMinus_DN extends Operator 
{
	RootMinus_DN ( )  { this.operation = Operation.root_dn; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws ArithmeticException, NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			if ( system_numeration.isZero ( this.result ) ) this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new NullPointerException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "3¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3", "9¯0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "20800838230¯10" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3", "9¯2", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "4481404746¯10¯" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_RootMinus extends Operator 
{
	D_RootMinus ( )  { this.operation = Operation.d_root; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws ArithmeticException, NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			if ( system_numeration.isZero ( this.result ) ) this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new NullPointerException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "2°2", "31", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "10173181866¯10¯" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3°3", "31", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "10011453177¯10¯" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_RootMinus extends Operator 
{
	DN_RootMinus ( )  { this.operation = Operation.dn_root; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws ArithmeticException, NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			if ( system_numeration.isZero ( this.result ) ) this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new NullPointerException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3¯1", "3", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "389407383983¯10" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_RootMinus_D extends Operator 
{
	D_RootMinus_D ( )  { this.operation = Operation.d_root_d; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws ArithmeticException, NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			if ( system_numeration.isZero ( this.result ) ) this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new NullPointerException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3°0", "9°0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "20800838230¯10" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0°6", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3°1", "2°2", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "11931663584¯10¯" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_RootMinus_DN extends Operator 
{
	DN_RootMinus_DN ( )  { this.operation = Operation.dn_root_dn; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws ArithmeticException, NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			if ( system_numeration.isZero ( this.result ) ) this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new NullPointerException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3¯0", "9¯0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "20800838230¯10" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0¯6", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3¯1", "2¯2", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "217153409091667268622319509501869035612694911183653275578312843593334794791813909211532780070520792543849¯110" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_RootMinus_DN extends Operator 
{
	D_RootMinus_DN ( )  { this.operation = Operation.d_root_dn; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws ArithmeticException, NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			if ( system_numeration.isZero ( this.result ) ) this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new NullPointerException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3°0", "9¯0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "20800838230¯10" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0¯6", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3°1", "2¯2", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "8777435898¯10¯" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_RootMinus_D extends Operator 
{
	DN_RootMinus_D ( )  { this.operation = Operation.dn_root_d; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws ArithmeticException, NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			if ( system_numeration.isZero ( this.result ) ) this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new NullPointerException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3¯0", "9°0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "20800838230¯10" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0°6", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3¯1", "2°2", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "4678428377488884764224896566873698296783843599698762298764953321375986670387807212084827390815344395335011116901359550160954645439865623866877365271035511338469043374847044283151910689587223030548019149799424¯200" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class PercentMinus_D extends Operator 
{
	PercentMinus_D ( )  { this.operation = Operation.percent_d; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "3°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯2" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°2", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°1", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯1" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class PercentMinus_DN extends Operator 
{
	PercentMinus_DN ( )  { this.operation = Operation.percent_dn; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "3¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯2" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯2", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯4" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯1", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯3" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_PercentMinus extends Operator 
{
	D_PercentMinus ( )  { this.operation = Operation.d_percent; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯2" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "59", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°1", "59", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯1" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_PercentMinus extends Operator 
{
	DN_PercentMinus ( )  { this.operation = Operation.dn_percent; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯2" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯2", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯2", "59", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯4" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯1", "59", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯3" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_PercentMinus_D extends Operator 
{
	D_PercentMinus_D ( )  { this.operation = Operation.d_percent_d; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°4", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59°0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯2" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59°3", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829°1" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°4", "59°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°3", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829°6" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°7", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829°10" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_PercentMinus_DN extends Operator 
{
	DN_PercentMinus_DN ( )  { this.operation = Operation.dn_percent_dn; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯4", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59¯0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯2" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59¯3", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯5" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯4", "59¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59¯3", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯10" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59¯7", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯14" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_PercentMinus_DN extends Operator 
{
	D_PercentMinus_DN ( )  { this.operation = Operation.d_percent_dn; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°4", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59¯0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯2" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59¯3", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯5" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°4", "59¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯3", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯7", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯4" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_PercentMinus_D extends Operator 
{
	DN_PercentMinus_D ( )  { this.operation = Operation.dn_percent_d; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯4", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59°0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯2" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59°3", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829°1" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯4", "59°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59°3", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯4" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59°7", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class PowMinus_D extends Operator 
{
    PowMinus_D ( ) { this.operation = new Pow_D ( ); }
    PowMinus_D ( Operation operation ) { this.operation = operation; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws ArithmeticException, NullPointerException, NullPointerException
    {
		try 
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.result = Operation.makePowByTenFromPoint ( this.result, system_numeration );
			String [ ] str_array_1 = Operation.getAllParts ( this.result, system_numeration );
			this.result = this.divide.arithmeticOperation ( system_numeration.ONE, str_array_1 [ 0 ], system_numeration, false );
			this.result = Operation.makePowByTenFromPoint ( this.result, system_numeration );

			String [ ] str_array_2 = Operation.getAllParts ( this.result, system_numeration );
			String degree = Operation.computeDegree ( str_array_2 [ 1 ].concat ( str_array_2 [ 2 ] ), str_array_1 [ 1 ].concat ( str_array_1 [ 2 ] ), "divide", system_numeration );

			this.result = str_array_2 [ 0 ].concat ( degree );
			this.result = this.degreeIsZero ( this.result, system_numeration );

			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ] + Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException ex )  { throw new ArithmeticException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ] + Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }
		
	private String degreeIsZero ( String number, ArithmeticTable system_numeration )
	{
		String [ ] str_array = Operation.getAllParts ( number, system_numeration );
		if ( system_numeration.isZero ( str_array [ 2 ] ) )  return str_array [ 0 ];   else  return number;
	}

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "2", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "2", "2°0", Operator.test_system, true ).equals ( "25000000000¯11" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "2°2", Operator.test_system, true ).equals ( "16069380442¯150" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class PowMinus_DN extends Operator 
{
	PowMinus_DN ( )  { this.operation = new PowMinus_D ( pow_dn ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "2", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "2", "2¯0", Operator.test_system, true ).equals ( "25000000000¯11" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "2¯2", Operator.test_system, true ).equals ( "96832378581¯11" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_PowMinus extends Operator 
{
	D_PowMinus ( )  { this.operation = new PowMinus_D ( d_pow ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°2", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "2°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "2°0", "2", Operator.test_system, true ).equals ( "25000000000¯11" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°2", "3", Operator.test_system, true ).equals ( "80000000000¯19" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°2", "1", Operator.test_system, true ).equals ( "20000000000¯13" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_PowMinus extends Operator 
{
	DN_PowMinus ( )  { this.operation = new PowMinus_D ( dn_pow ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯2", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "2¯0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "2¯0", "2", Operator.test_system, true ).equals ( "25000000000¯11" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯2", "3", Operator.test_system, true ).equals ( "80000000000¯7" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯2", "1", Operator.test_system, true ).equals ( "20000000000¯9" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_PowMinus_D extends Operator 
{
	D_PowMinus_D ( )  { this.operation = new PowMinus_D ( d_pow_d ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "2°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "2°0", "2°0", Operator.test_system, true ).equals ( "25000000000¯11" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "2°2", Operator.test_system, true ).equals ( "16069380442¯150" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°1", "1°1", Operator.test_system, true ).equals ( "10240000000¯27" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_PowMinus_DN extends Operator 
{
	DN_PowMinus_DN ( )  { this.operation = new PowMinus_D ( dn_pow_dn ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "2¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "2¯0", "2¯0", Operator.test_system, true ).equals ( "25000000000¯11" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "2¯2", Operator.test_system, true ).equals ( "96832378581¯11" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯1", "1¯1", Operator.test_system, true ).equals ( "10717734625¯10" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_PowMinus_DN extends Operator 
{
	D_PowMinus_DN ( )  { this.operation = new PowMinus_D ( d_pow_dn ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "2°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "2°0", "2¯0", Operator.test_system, true ).equals ( "25000000000¯11" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "2¯2", Operator.test_system, true ).equals ( "96832378581¯11" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°1", "1¯1", Operator.test_system, true ).equals ( "67624333781¯11" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_PowMinus_D extends Operator 
{
	DN_PowMinus_D ( )  { this.operation = new PowMinus_D ( dn_pow_d ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "2¯0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "2¯0", "2°0", Operator.test_system, true ).equals ( "25000000000¯11" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "2°2", Operator.test_system, true ).equals ( "16069380442¯150" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯1", "1°1", Operator.test_system, true ).equals ( "10240000000¯7" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class MultiplyMinus_D extends Operator 
{
	MultiplyMinus_D ( )  { this.operation = Operation.multiply_d; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829°0" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°5", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829°5" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°10", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829°10" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MultiplyMinus_DN extends Operator 
{
	MultiplyMinus_DN ( )  { this.operation = Operation.multiply_dn; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯0" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯5", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯5" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯10", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯10" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_MultiplyMinus extends Operator 
{
	D_MultiplyMinus ( )  { this.operation = Operation.d_multiply; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }		
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829°0" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829°5" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°10", "59", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829°10" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_MultiplyMinus extends Operator 
{
	DN_MultiplyMinus ( )  { this.operation = Operation.dn_multiply; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯0" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯5" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯10", "59", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯10" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_MultiplyMinus_D extends Operator 
{
	D_MultiplyMinus_D ( )  { this.operation = new D_Multiply_D ( SystemNumeration.DEGREE ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59°0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829°0" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°6", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829°11" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_MultiplyMinus_DN extends Operator 
{
	DN_MultiplyMinus_DN ( )  { this.operation = new D_Multiply_D ( SystemNumeration.DEGREE_NEGATIVE ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59¯0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯0" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59¯6", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯11" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_MultiplyMinus_DN extends Operator 
{
	D_MultiplyMinus_DN ( )  { this.operation = Operation.d_multiply_dn; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59¯0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829°0" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯6", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯1" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°7", "59¯6", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829°1" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_MultiplyMinus_D extends Operator 
{
	DN_MultiplyMinus_D ( )  { this.operation = new D_MultiplyMinus_DN ( ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_2, number_1, system_numeration, false );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59°0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829°0" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59°6", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829°1" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯7", "59°6", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "1829¯1" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class DivideMinus_D extends Operator 
{
	DivideMinus_D ( )  { this.operation = Operation.divide_d; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws ArithmeticException, NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			if ( ! system_numeration.isZero ( this.result ) )  this.result = SystemNumeration.MINUS.concat ( this.result );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new ArithmeticException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "11°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°6", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "11°0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "28181818181¯10" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0°6", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "11°6", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "28181818181¯16" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°6", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "52542372881¯17" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DivideMinus_DN extends Operator 
{
	DivideMinus_DN ( )  { this.operation = Operation.divide_dn; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException  // Логика в том, что первое число будет с начало умножено на степень десяточной части второго числа, уж после делится на целой части этого же второго числа
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			if ( ! system_numeration.isZero ( this.result ) )  this.result = SystemNumeration.MINUS.concat ( this.result );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new ArithmeticException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "11¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯6", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "11¯0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "28181818181¯10" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "0¯6", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "11¯6", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "28181818181¯4" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯6", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "52542372881¯5" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_DivideMinus extends Operator 
{
	D_DivideMinus ( )  { this.operation = Operation.d_divide; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			if ( ! system_numeration.isZero ( this.result ) )  this.result = SystemNumeration.MINUS.concat ( this.result );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new ArithmeticException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }		
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "11", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°6", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "11", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "28181818181¯10" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°6", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°6", "11", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "28181818181¯4" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°6", "59", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "52542372881¯5" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_DivideMinus extends Operator 
{
	DN_DivideMinus ( )  { this.operation = Operation.dn_divide; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			if ( ! system_numeration.isZero ( this.result ) )  this.result = SystemNumeration.MINUS.concat ( this.result );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new ArithmeticException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }		
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "11", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯6", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "11", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "28181818181¯10" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯6", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯6", "11", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "28181818181¯16" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯6", "59", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "52542372881¯17" )  ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_DivideMinus_D extends Operator 
{
	D_DivideMinus_D ( )  { this.operation = Operation.d_divide_d; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			if ( ! system_numeration.isZero ( this.result ) )  this.result = SystemNumeration.MINUS.concat ( this.result );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new ArithmeticException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }		
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59°0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "52542372881¯11" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63°0", "59°0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "10677966101¯10" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59°7", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "52542372881¯18" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "59°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°8", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "52542372881¯14" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63°5", "59°7", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "10677966101¯12" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_DivideMinus_DN extends Operator 
{
	DN_DivideMinus_DN ( )  { this.operation = Operation.dn_divide_dn; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			if ( ! system_numeration.isZero ( this.result ) )  this.result = SystemNumeration.MINUS.concat ( this.result );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new ArithmeticException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }		
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59¯0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "52542372881¯11" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63¯0", "59¯0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "10677966101¯10" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59¯7", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "52542372881¯4" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "59¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59¯8", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "52542372881¯8" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63¯5", "59¯7", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "10677966101¯8" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_DivideMinus_DN extends Operator 
{
	D_DivideMinus_DN ( )  { this.operation = Operation.d_divide_dn; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			if ( ! system_numeration.isZero ( this.result ) )  this.result = SystemNumeration.MINUS.concat ( this.result );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new ArithmeticException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }		
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59¯0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "52542372881¯11" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63°0", "59¯0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "10677966101¯10" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59¯7", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "52542372881¯4" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "59¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯7", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "52542372881°1" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63°5", "59¯7", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat (  "10677966101°2" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_DivideMinus_D extends Operator 
{
	DN_DivideMinus_D ( )  { this.operation = Operation.dn_divide_d; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			if ( ! system_numeration.isZero ( this.result ) )  this.result = SystemNumeration.MINUS.concat ( this.result );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
		catch ( ArithmeticException exc )  { throw new ArithmeticException ( Colors.RED + exc.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }		
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59°0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "52542372881¯11" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63¯0", "59°0", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "10677966101¯10" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59°7", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "52542372881¯18" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "59°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59°7", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "52542372881¯23" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "63¯5", "59°7", Operator.test_system, true ).equals ( SystemNumeration.MINUS.concat ( "10677966101¯22" ) ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

//--- Д Л Я   В Ы П О Л Н Е Н И Я   О П Е Р А Ц И Й   С   О Т Р И Ц А Т Е Л Ь Н Ы М И   Ч И С Л А М И   С   Т О Ч К О Й   И   С О   С Т Е П Е Н Ь Ю   Д Е С Я Т О Ч Н О Й   Ч А С Т И ---
class PointMinus_D extends Operator 
{
	PointMinus_D ( )  { this.operation = new Point_D ( ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
	}
}

class PointMinus_DN extends Operator 
{
	PointMinus_DN ( )  { this.operation = new Point_DN ( ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		if ( ! this.arithmeticOperation ( "0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
	}
}
// --------------------------------

//--- Д Л Я   В Ы П О Л Н Е Н И Я   П Р О С Т Е Й Ш И Х   А Р И Ф М Е Т И Ч Е С К И Х   О П Е Р А Ц И Й   С  О Б Е Я М И  О Т Р И Ц А Т Е Л Ь Н Ы М И   О П Е Р А Н Д А М И   И   С О   С Т Е П Е Н Ь Ю   Д Е С Я Т О Ч Н О Й   Ч А С Т И ---
class MinusRootMinus_D extends Operator 
{
	MinusRootMinus_D ( )  { this.operation = Operation.root_d; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusRootMinus_DN extends Operator 
{
	MinusRootMinus_DN ( )  { this.operation = Operation.root_dn; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusD_RootMinus extends Operator 
{
	MinusD_RootMinus ( )  { this.operation = Operation.d_root; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusDN_RootMinus extends Operator 
{
	MinusDN_RootMinus ( )  { this.operation = Operation.dn_root; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusD_RootMinus_D extends Operator 
{
	MinusD_RootMinus_D ( )  { this.operation = Operation.d_root_d; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{

	}
}

class MinusDN_RootMinus_DN extends Operator 
{
	MinusDN_RootMinus_DN ( )  { this.operation = Operation.dn_root_dn; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{

	}
}

class MinusD_RootMinus_DN extends Operator 
{
	MinusD_RootMinus_DN ( )  { this.operation = Operation.d_root_dn; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusDN_RootMinus_D extends Operator 
{
	MinusDN_RootMinus_D ( )  { this.operation = Operation.dn_root_d; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}
// --------------------------------

class MinusPercentMinus_D extends Operator 
{
	MinusPercentMinus_D ( )  { this.operation = Operation.percent_d; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusPercentMinus_DN extends Operator 
{
	MinusPercentMinus_DN ( )  { this.operation = Operation.percent_dn; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusD_PercentMinus extends Operator 
{
	MinusD_PercentMinus ( )  { this.operation = Operation.d_percent; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusDN_PercentMinus extends Operator 
{
	MinusDN_PercentMinus ( )  { this.operation = Operation.dn_percent; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusD_PercentMinus_D extends Operator 
{
	MinusD_PercentMinus_D ( )  { this.operation = Operation.d_percent_d; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusDN_PercentMinus_DN extends Operator 
{
	MinusDN_PercentMinus_DN ( )  { this.operation = Operation.dn_percent_dn; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusD_PercentMinus_DN extends Operator 
{
	MinusD_PercentMinus_DN ( )  { this.operation = Operation.d_percent_dn; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusDN_PercentMinus_D extends Operator 
{
	MinusDN_PercentMinus_D ( )  { this.operation = Operation.dn_percent_d; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}
// --------------------------------

class MinusPowMinus_D extends Operator 
{
	MinusPowMinus_D ( )  { this.operation = new PowMinus_D ( ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusPowMinus_DN extends Operator 
{
	MinusPowMinus_DN ( )  { this.operation = new PowMinus_D ( pow_dn ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusD_PowMinus extends Operator 
{
	MinusD_PowMinus ( )  { this.operation = new PowMinus_D ( d_pow ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusDN_PowMinus extends Operator 
{
	MinusDN_PowMinus ( )  { this.operation = new PowMinus_D ( dn_pow ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusD_PowMinus_D extends Operator 
{
	MinusD_PowMinus_D ( )  { this.operation = new PowMinus_D ( d_pow_d ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusDN_PowMinus_DN extends Operator 
{
	MinusDN_PowMinus_DN ( )  { this.operation = new PowMinus_D ( dn_pow_dn ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusD_PowMinus_DN extends Operator 
{
	MinusD_PowMinus_DN ( )  { this.operation = new PowMinus_D ( d_pow_dn ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusDN_PowMinus_D extends Operator 
{
	MinusDN_PowMinus_D ( )  { this.operation = new PowMinus_D ( dn_pow_d ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}
// --------------------------------

class MinusMultiplyMinus_D extends Operator 
{
	MinusMultiplyMinus_D ( )  { this.operation = Operation.multiply_d; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusMultiplyMinus_DN extends Operator 
{
	MinusMultiplyMinus_DN ( )  { this.operation = Operation.multiply_dn; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusD_MultiplyMinus extends Operator 
{
	MinusD_MultiplyMinus ( )  { this.operation = Operation.d_multiply; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusDN_MultiplyMinus extends Operator 
{
	MinusDN_MultiplyMinus ( )  { this.operation = Operation.dn_multiply; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusD_MultiplyMinus_D extends Operator 
{
	MinusD_MultiplyMinus_D ( )  { this.operation = new D_Multiply_D ( SystemNumeration.DEGREE ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusDN_MultiplyMinus_DN extends Operator 
{
	MinusDN_MultiplyMinus_DN ( )  { this.operation = new D_Multiply_D ( SystemNumeration.DEGREE_NEGATIVE ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
	{
		try {
			if (print_calling) this.makeResultExpression(number_1, number_2, print_calling);

			this.result = this.operation.arithmeticOperation(number_1, number_2, system_numeration, false);
			this.outputResult(print_calling);
			return this.result;
		} catch (NullPointerException ex) {
			throw new NullPointerException(Colors.RED + ex.getMessage() + "  " + new Throwable().getStackTrace()[0] + Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass().getName() + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR);
		}
	}

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusD_MultiplyMinus_DN extends Operator 
{
	MinusD_MultiplyMinus_DN ( )  { this.operation = Operation.d_multiply_dn; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusDN_MultiplyMinus_D extends Operator 
{
	MinusDN_MultiplyMinus_D ( )  { this.operation = new DN_Multiply_D ( ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_2, number_1, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}
// --------------------------------

class MinusDivideMinus_D extends Operator 
{
	MinusDivideMinus_D ( )  { this.operation = Operation.divide_d; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = SystemNumeration.MINUS.concat ( this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false ) );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusDivideMinus_DN extends Operator 
{
	MinusDivideMinus_DN ( )  { this.operation = Operation.divide_dn; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException  // Логика в том, что первое число будет с начало умножено на степень десяточной части второго числа, уж после делится на целой части этого же второго числа
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusD_DivideMinus extends Operator 
{
	MinusD_DivideMinus ( )  { this.operation = Operation.d_divide; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusDN_DivideMinus extends Operator 
{
	MinusDN_DivideMinus ( )  { this.operation = Operation.dn_divide; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusD_DivideMinus_D extends Operator 
{
	MinusD_DivideMinus_D ( )  { this.operation = Operation.d_divide_d; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusDN_DivideMinus_DN extends Operator 
{
	MinusDN_DivideMinus_DN ( )  { this.operation = Operation.dn_divide_dn; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusD_DivideMinus_DN extends Operator 
{
	MinusD_DivideMinus_DN ( )  { this.operation = Operation.d_divide_dn; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}

class MinusDN_DivideMinus_D extends Operator 
{
	MinusDN_DivideMinus_D ( )  { this.operation = Operation.dn_divide_d; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		
	}
}
// --------------------------------

//--- Д Л Я   В Ы П О Л Н Е Н И Я   Л О Г И Ч Е С К И Х   О П Е Р А Ц И Й   С О   С Т Е П Е Н Ь Ю   Д Е С Я Т О Ч Н О Й   Ч А С Т И   ( П Е Р В Ы Й   О П Е Р А Н Д   О Т Р И Ц А Т Е Л Ь Н Ы Й ) ---
class MinusLess_D extends Operator 
{
	MinusLess_D ( )  { this.operation = Operation.minus_less; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusLessOrEven_D extends Operator 
{
	MinusLessOrEven_D ( )  { this.operation = Operation.minus_less_or_even; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusMore_D extends Operator 
{
	MinusMore_D ( )  { this.operation = Operation.minus_more; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusMoreOrEven_D extends Operator 
{
	MinusMoreOrEven_D ( )  { this.operation = Operation.minus_more_oreven; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusEven_D extends Operator 
{
	MinusEven_D ( )  { this.operation = Operation.minus_even; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusNotEven_D extends Operator 
{
	MinusNotEven_D ( )  { this.operation = new MinusEven_D ( ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			if ( this.result.equals ( system_numeration.ZERO ) )  this.result = system_numeration.ONE;  else  this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class MinusLess_DN extends Operator 
{
	MinusLess_DN ( )  { this.operation = Operation.minus_less; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusLessOrEven_DN extends Operator 
{
	MinusLessOrEven_DN ( )  { this.operation = Operation.minus_less_or_even; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusMore_DN extends Operator 
{
	MinusMore_DN ( )  { this.operation = Operation.minus_more; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusMoreOrEven_DN extends Operator 
{
	MinusMoreOrEven_DN ( )  { this.operation = Operation.minus_more_oreven; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusEven_DN extends Operator 
{
	MinusEven_DN ( )  { this.operation = Operation.minus_even; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusNotEven_DN extends Operator 
{
	MinusNotEven_DN ( )  { this.operation = new MinusEven_DN ( ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			if ( this.result.equals ( system_numeration.ZERO ) )  this.result = system_numeration.ONE;  else this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class MinusD_Less extends Operator 
{
	MinusD_Less ( )  { this.operation = Operation.minus_less; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "8", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°2", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°2", "5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°2", "8", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°2", "3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_LessOrEven extends Operator 
{
	MinusD_LessOrEven ( )  { this.operation = Operation.minus_less_or_even; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "8", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°2", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°2", "5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°2", "8", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°2", "3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_More extends Operator 
{
	MinusD_More ( )  { this.operation = Operation.minus_more; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "8", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°2", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°2", "5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°2", "8", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°2", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_MoreOrEven extends Operator 
{
	MinusD_MoreOrEven ( )  { this.operation = Operation.minus_more_oreven; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "8", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°2", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°2", "5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°2", "8", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°2", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_Even extends Operator 
{
	MinusD_Even ( )  { this.operation = Operation.minus_even; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "8", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°2", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°2", "5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°2", "8", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°2", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_NotEven extends Operator 
{
	MinusD_NotEven ( )  { this.operation = new MinusD_Even ( ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			if ( this.result.equals ( system_numeration.ZERO ) )  this.result = system_numeration.ONE;  else this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "8", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°2", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°2", "5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°2", "8", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°2", "3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class MinusDN_Less extends Operator 
{
	MinusDN_Less ( )  { this.operation = Operation.minus_less; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "8", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯2", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯2", "5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯2", "8", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯2", "3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusDN_LessOrEven extends Operator 
{
	MinusDN_LessOrEven ( )  { this.operation = Operation.minus_less_or_even; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "8", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯2", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯2", "5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯2", "8", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯2", "3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusDN_More extends Operator 
{
	MinusDN_More ( )  { this.operation = Operation.minus_more; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "8", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯2", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯2", "5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯2", "8", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯2", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusDN_MoreOrEven extends Operator 
{
	MinusDN_MoreOrEven ( )  { this.operation = Operation.minus_more_oreven; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "8", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯2", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯2", "5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯2", "8", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯2", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusDN_Even extends Operator 
{
	MinusDN_Even ( )  { this.operation = Operation.minus_even; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "8", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯2", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯2", "5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯2", "8", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯2", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusDN_NotEven extends Operator 
{
	MinusDN_NotEven ( )  { this.operation = new MinusDN_Even (  ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			if ( ! this.result.equals ( system_numeration.ZERO ) )  this.result = system_numeration.ZERO;  else this.result = system_numeration.ONE;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "8", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯2", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯2", "5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯2", "8", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯2", "3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class MinusD_Less_D extends Operator 
{
	MinusD_Less_D ( )  { this.operation = Operation.minus_less; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "8°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "8°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "5°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°7", "5°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_LessOrEven_D extends Operator 
{
	MinusD_LessOrEven_D ( )  { this.operation = Operation.minus_less_or_even; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "8°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "8°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "5°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°7", "5°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_More_D extends Operator 
{
	MinusD_More_D ( )  { this.operation = Operation.minus_more; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "8°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "8°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "5°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°7", "5°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_MoreOrEven_D extends Operator 
{
	MinusD_MoreOrEven_D ( )  { this.operation = Operation.minus_more_oreven; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
		if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
		
        this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
        this.outputResult ( print_calling );
        return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "8°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "8°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "5°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°7", "5°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_Even_D extends Operator 
{
	MinusD_Even_D ( )  { this.operation = Operation.minus_even; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "8°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "8°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "5°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°7", "5°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_NotEven_D extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( system_numeration.isZero ( number_1 )  &&  system_numeration.isZero ( number_2 ) )  this.result = system_numeration.ZERO;  else  this.result = system_numeration.ONE;

			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "8°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "8°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "5°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°7", "5°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class MinusD_Less_DN extends Operator 
{
	MinusD_Less_DN ( )  { this.operation = Operation.minus_less; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "8¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "8¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°7", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_LessOrEven_DN extends Operator 
{
	MinusD_LessOrEven_DN ( )  { this.operation = Operation.minus_less_or_even; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "8¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "8¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°7", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_More_DN extends Operator 
{
	MinusD_More_DN ( )  { this.operation = Operation.minus_more; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "8¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "8¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°7", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_MoreOrEven_DN extends Operator 
{
	MinusD_MoreOrEven_DN ( )  { this.operation = Operation.minus_more_oreven; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "8¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "8¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°7", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_Even_DN extends Operator 
{
	MinusD_Even_DN ( )  { this.operation = Operation.minus_even; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "8¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "8¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°7", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_NotEven_DN extends Operator 
{
	MinusD_NotEven_DN ( )  { this.operation = Operation.minus_not_even_d_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "8¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "8¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°7", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class MinusDN_Less_D extends Operator 
{
	MinusDN_Less_D ( )  { this.operation = Operation.minus_less; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "8¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "8¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯7", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusDN_LessOrEven_D extends Operator 
{
	MinusDN_LessOrEven_D ( )  { this.operation = Operation.minus_less_or_even; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "8¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "8¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯7", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusDN_More_D extends Operator 
{
	MinusDN_More_D ( )  { this.operation = Operation.minus_more; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "8¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "8¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯7", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusDN_MoreOrEven_D extends Operator 
{
	MinusDN_MoreOrEven_D ( )  { this.operation = Operation.minus_more_oreven; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "8¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "8¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯7", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusDN_Even_D extends Operator 
{
	MinusDN_Even_D ( )  { this.operation = Operation.minus_even; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "8¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "8¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯7", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusDN_NotEven_D extends Operator 
{
	MinusDN_NotEven_D ( )  { this.operation = new MinusDN_Even_D ( ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			if ( system_numeration.isZero ( this.result ) )   this.result = system_numeration.ONE;  else this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "8¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "8¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯7", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class MinusDN_Less_DN extends Operator 
{
	MinusDN_Less_DN ( )  { this.operation = Operation.minus_less; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "8¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "8¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯7", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusDN_LessOrEven_DN extends Operator 
{
	MinusDN_LessOrEven_DN ( )  { this.operation = Operation.minus_less_or_even; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "8¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "8¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯7", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusDN_More_DN extends Operator 
{
	MinusDN_More_DN ( )  { this.operation = Operation.minus_more; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "8¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "8¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯7", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusDN_MoreOrEven_DN extends Operator 
{
	MinusDN_MoreOrEven_DN ( )  { this.operation = Operation.minus_more_oreven; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "8¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "8¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯7", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusDN_Even_DN extends Operator 
{
	MinusDN_Even_DN ( )  { this.operation = Operation.minus_even; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "8¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "8¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯7", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusDN_NotEven_DN extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( system_numeration.isZero ( number_1 )  &&  system_numeration.isZero ( number_2 ) )  this.result = system_numeration.ZERO;  else  this.result = system_numeration.ONE;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "8¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "8¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯7", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

//--- Д Л Я   В Ы П О Л Н Е Н И Я   Л О Г И Ч Е С К И Х   О П Е Р А Ц И Й   С О   С Т Е П Е Н Ь Ю   Д Е С Я Т О Ч Н О Й   Ч А С Т И   (  В Т О Р О Й   О П Е Р А Н Д   О Т Р И Ц А Т Е Л Ь Н Ы Й  ) ---
class LessMinus_D extends Operator 
{
	LessMinus_D ( )  { this.operation = new LessMinus ( ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class LessOrEvenMinus_D extends Operator 
{
	LessOrEvenMinus_D ( )  { this.operation = new LessOrEvenMinus ( ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MoreMinus_D extends Operator 
{
	MoreMinus_D ( )  { this.operation = Operation.more_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MoreOrEvenMinus_D extends Operator 
{
	MoreOrEvenMinus_D ( )  { this.operation = Operation.more_or_even_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class EvenMinus_D extends Operator 
{
	EvenMinus_D ( )  { this.operation = Operation.even_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class NotEvenMinus_D extends Operator 
{
	NotEvenMinus_D ( )  { this.operation = new EvenMinus_D ( ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ONE;  else this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class LessMinus_DN extends Operator 
{
	LessMinus_DN ( )  { this.operation = Operation.less_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class LessOrEvenMinus_DN extends Operator 
{
	LessOrEvenMinus_DN ( )  { this.operation = Operation.less_or_even_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MoreMinus_DN extends Operator 
{
	MoreMinus_DN ( )  { this.operation = Operation.more_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MoreOrEvenMinus_DN extends Operator 
{
	MoreOrEvenMinus_DN ( )  { this.operation = Operation.more_or_even_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class EvenMinus_DN extends Operator 
{
	EvenMinus_DN ( )  { this.operation = Operation.even_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class NotEvenMinus_DN extends Operator 
{
	NotEvenMinus_DN ( )  { this.operation = new EvenMinus_DN ( ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ONE;  else this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "5¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "8¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5", "3¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class D_LessMinus extends Operator 
{
	D_LessMinus ( )  { this.operation = Operation.less_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "8", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_LessOrEvenMinus extends Operator 
{
	D_LessOrEvenMinus ( )  { this.operation = Operation.less_or_even_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "8", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_MoreMinus extends Operator 
{
	D_MoreMinus ( )  { this.operation = Operation.more_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "8", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_MoreOrEvenMinus extends Operator 
{
	D_MoreOrEvenMinus ( )  { this.operation = Operation.more_or_even_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "8", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_EvenMinus extends Operator 
{
	D_EvenMinus ( )  { this.operation = Operation.even_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "8", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_NotEvenMinus extends Operator 
{
	D_NotEvenMinus ( )  { this.operation = new D_EvenMinus ( ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ONE;  else this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "8", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class DN_LessMinus extends Operator 
{
	DN_LessMinus ( )  { this.operation = Operation.less_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "8", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_LessOrEvenMinus extends Operator 
{
	DN_LessOrEvenMinus ( )  { this.operation = Operation.less_or_even_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "8", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_MoreMinus extends Operator 
{
	DN_MoreMinus ( )  { this.operation = Operation.more_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°3", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "8", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°3", "3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_MoreOrEvenMinus extends Operator 
{
	DN_MoreOrEvenMinus ( )  { this.operation = Operation.more_or_even_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "8", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_EvenMinus extends Operator 
{
	DN_EvenMinus ( )  { this.operation = Operation.even_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "8", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_NotEvenMinus extends Operator 
{
	DN_NotEvenMinus ( )  { this.operation = Operation.not_even_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯3", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "8", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯3", "3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class D_LessMinus_D extends Operator 
{
	D_LessMinus_D ( )  { this.operation = Operation.less_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "7°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "5°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "7°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "3°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_LessOrEvenMinus_D extends Operator 
{
	D_LessOrEvenMinus_D ( )  { this.operation = Operation.less_or_even_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "7°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "5°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "7°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "3°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_MoreMinus_D extends Operator 
{
	D_MoreMinus_D ( )  { this.operation = Operation.more_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "7°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "5°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "7°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "3°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_MoreOrEvenMinus_D extends Operator 
{
	D_MoreOrEvenMinus_D ( )  { this.operation = Operation.more_or_even_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "7°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "5°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "7°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "3°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_EvenMinus_D extends Operator 
{
	D_EvenMinus_D ( )  { this.operation = Operation.even_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "7°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "5°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "7°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "3°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_NotEvenMinus_D extends Operator 
{
	D_NotEvenMinus_D ( )  { this.operation = new D_EvenMinus_D ( ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ONE;  else this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "7°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "5°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "7°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "3°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class D_LessMinus_DN extends Operator 
{
	D_LessMinus_DN ( )  { this.operation = Operation.less_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
	{
		try
		{
			if (print_calling) this.makeResultExpression(number_1, number_2, print_calling);

			this.result = this.operation.arithmeticOperation(number_1, number_2, system_numeration, false);
			this.outputResult(print_calling);
			return this.result;
		}
		catch (NullPointerException ex) { throw new NullPointerException(Colors.RED + ex.getMessage() + "  " + new Throwable().getStackTrace()[0] + Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass().getName() + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR); }
	}

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "7¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "5¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "7¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "3¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_LessOrEvenMinus_DN extends Operator 
{
	D_LessOrEvenMinus_DN ( )  { this.operation = Operation.less_or_even_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "7¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "5¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "7¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "3¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_MoreMinus_DN extends Operator 
{
	D_MoreMinus_DN ( )  { this.operation = Operation.more_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "7¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "5¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "7¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "3¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "0¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_MoreOrEvenMinus_DN extends Operator 
{
	D_MoreOrEvenMinus_DN ( )  { this.operation = Operation.more_or_even_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "7¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "5¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "7¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "3¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "0¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_EvenMinus_DN extends Operator 
{
	D_EvenMinus_DN ( )  { this.operation = Operation.even_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "7¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "5¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "7¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "3¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class D_NotEvenMinus_DN extends Operator 
{
	D_NotEvenMinus_DN ( )  { this.operation = new D_EvenMinus_DN ( ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			if ( system_numeration.isZero ( this.result ) )  this.result = system_numeration.ONE;  else  this.result = system_numeration.ZERO;
			
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "5¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "7¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°0", "3¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "5¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "7¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "3¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5°5", "0¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class DN_LessMinus_D extends Operator 
{
	DN_LessMinus_D ( )  { this.operation = Operation.less_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "7°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "5°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "7°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "3°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_LessOrEvenMinus_D extends Operator 
{
	DN_LessOrEvenMinus_D ( )  { this.operation = Operation.less_or_even_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "7°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "5°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "7°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "3°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_MoreMinus_D extends Operator 
{
	DN_MoreMinus_D ( )  { this.operation = Operation.more_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "7°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "5°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "7°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "3°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_MoreOrEvenMinus_D extends Operator 
{
	DN_MoreOrEvenMinus_D ( )  { this.operation = Operation.more_or_even_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "7°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "5°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "7°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "3°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_EvenMinus_D extends Operator 
{
	DN_EvenMinus_D ( )  { this.operation = Operation.even_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "7°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3°2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "5°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "7°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "3°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_NotEvenMinus_D extends Operator 
{
	DN_NotEvenMinus_D ( )  { this.operation = Operation.not_even_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "7°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "5°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "7°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "3°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class DN_LessMinus_DN extends Operator 
{
	DN_LessMinus_DN ( )  { this.operation = Operation.less_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "7¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "5¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "7¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "3¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_LessOrEvenMinus_DN extends Operator 
{
	DN_LessOrEvenMinus_DN ( )  { this.operation = Operation.less_or_even_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "7¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "5¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "7¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "3¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_MoreMinus_DN extends Operator 
{
	DN_MoreMinus_DN ( )  { this.operation = Operation.more_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "7¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "5¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "7¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "3¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "0¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_MoreOrEvenMinus_DN extends Operator 
{
	DN_MoreOrEvenMinus_DN ( )  { this.operation = Operation.more_or_even_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "7¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3¯2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "5¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "7¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "3¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "0¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_EvenMinus_DN extends Operator 
{
	DN_EvenMinus_DN ( )  { this.operation = Operation.even_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "7¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "5¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "7¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "3¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class DN_NotEvenMinus_DN extends Operator 
{
	DN_NotEvenMinus_DN ( )  { this.operation = Operation.not_even_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "5°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "7°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯0", "3°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "5°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "7°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "3°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5¯5", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

//--- Д Л Я   В Ы П О Л Н Е Н И Я   Л О Г И Ч Е С К И Х   О П Е Р А Ц И Й   С О   С Т Е П Е Н Ь Ю   Д Е С Я Т О Ч Н О Й   Ч А С Т И   ( О Б А   О П Е Р А Н Д А   О Т Р И Ц А Т Е Л Ь Н Ы Е ) ---
class MinusLessMinus_D extends Operator 
{
    MinusLessMinus_D ( )  { this.operation = Operation.less_d; }
    MinusLessMinus_D ( Operation operation ) { this.operation = operation; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( Operator.compareNumbersWithPointAndTenPow ( number_1, number_2, false, system_numeration ) == 0 )  this.result = system_numeration.ZERO;
			else
			{
				this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
				this.result = Operator.alterBoolValue ( this.result, system_numeration );
			}
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31000", "59°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31000", "31°2", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31000", "31°4", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusLessOrEvenMinus_D extends Operator 
{
	MinusLessOrEvenMinus_D ( )  { this.operation = new MinusLessMinus_D ( Operation.less_or_even_d ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( Operator.compareNumbersWithPointAndTenPow ( number_1, number_2, false, system_numeration ) == 0 )  this.result = system_numeration.ONE;  else  this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000", "31°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "2900000", "31°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "5900000", "31°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusMoreMinus_D extends Operator 
{
	MinusMoreMinus_D ( )  { this.operation = new MinusLessMinus_D ( Operation.more_d ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusMoreOrEvenMinus_D extends Operator 
{
	MinusMoreOrEvenMinus_D ( )  { this.operation = new MinusLessMinus_D ( Operation.more_or_even_d ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( Operator.compareNumbersWithPointAndTenPow ( number_1, number_2, false, system_numeration ) == 0 )  this.result = system_numeration.ONE;  else  this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31000", "31°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusEvenMinus_D extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( Operator.compareNumbersWithPointAndTenPow ( number_1, number_2, false, system_numeration ) == 0 )  this.result = system_numeration.ONE;  else  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000", "31°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusNotEvenMinus_D extends Operator 
{
    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			if ( Operator.compareNumbersWithPointAndTenPow ( number_1, number_2, false, system_numeration ) != 0 )  this.result = system_numeration.ONE;  else  this.result = system_numeration.ZERO;
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000", "31°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class MinusLessMinus_DN extends Operator 
{
	MinusLessMinus_DN ( )  { this.operation = new MinusLessMinus_D ( Operation.less_d ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31000000¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100", "3100000000¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusLessOrEvenMinus_DN extends Operator 
{
	MinusLessOrEvenMinus_DN ( )  { this.operation = new MinusLessMinus_D ( new LessOrEven_DN ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( Operator.compareNumbersWithPointAndTenPow ( number_1, number_2, false, system_numeration ) == 0 )  this.result = system_numeration.ONE;  else  this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "3100000¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "310", "3100000¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusMoreMinus_DN extends Operator 
{
	MinusMoreMinus_DN ( )  { this.operation = new MinusLessMinus_D ( new More_DN ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100", "31000¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "310", "31000¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100", "31000¯2", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusMoreOrEvenMinus_DN extends Operator 
{
	MinusMoreOrEvenMinus_DN ( )  { this.operation = new MinusLessMinus_D ( new MoreOrEven_DN ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( Operator.compareNumbersWithPointAndTenPow ( number_1, number_2, false, system_numeration ) == 0 )  this.result = system_numeration.ONE;  else  this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "3100000¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31000000¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusEvenMinus_DN extends Operator 
{
	MinusEvenMinus_DN ( )  { this.operation = Operation.minus_even_d_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "3100000¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31000000¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "310", "31000000¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100", "31000000¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusNotEvenMinus_DN extends Operator 
{
	MinusNotEvenMinus_DN ( )  { this.operation = Operation.minus_not_even_d_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0", "0¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "29¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "59¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "31¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31", "3100000¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "310", "3100000¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class MinusD_LessMinus extends Operator 
{
	MinusD_LessMinus ( )  { this.operation = new MinusLessMinus_D ( new D_Less ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "3100000", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31000000", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_LessOrEvenMinus extends Operator 
{
	MinusD_LessOrEvenMinus ( )  { this.operation = new MinusLessMinus_D ( new D_LessOrEven ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( Operator.compareNumbersWithPointAndTenPow ( number_1, number_2, false, system_numeration ) == 0 )  this.result = system_numeration.ONE;  else  this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "3100000", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31000000", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_MoreMinus extends Operator 
{
	MinusD_MoreMinus ( )  { this.operation = new MinusLessMinus_D ( new D_More ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "3100000", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_MoreOrEvenMinus extends Operator 
{
	MinusD_MoreOrEvenMinus ( )  { this.operation = new MinusLessMinus_D ( new D_MoreOrEven ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( Operator.compareNumbersWithPointAndTenPow ( number_1, number_2, false, system_numeration ) == 0 )  this.result = system_numeration.ONE;  else  this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "3100000", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_EvenMinus extends Operator 
{
	MinusD_EvenMinus ( )  { this.operation = Operation.minus_even_d_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "3100000", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_NotEvenMinus extends Operator 
{
	MinusD_NotEvenMinus ( )  { this.operation = Operation.minus_not_even_d_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "3100000", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31000000", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class MinusDN_LessMinus extends Operator 
{
	MinusDN_LessMinus ( )  { this.operation = new MinusLessMinus_D ( new DN_Less ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusDN_LessOrEvenMinus extends Operator 
{
	MinusDN_LessOrEvenMinus ( )  { this.operation = new MinusLessMinus_D ( new DN_LessOrEven ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( Operator.compareNumbersWithPointAndTenPow ( number_1, number_2, false, system_numeration ) == 0 )  this.result = system_numeration.ONE;  else  this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusDN_MoreMinus extends Operator 
{
	MinusDN_MoreMinus ( )  { this.operation = new MinusLessMinus_D ( new DN_More ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusDN_MoreOrEvenMinus extends Operator 
{
	MinusDN_MoreOrEvenMinus ( )  { this.operation = new MinusLessMinus_D ( new DN_MoreOrEven ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( Operator.compareNumbersWithPointAndTenPow ( number_1, number_2, false, system_numeration ) == 0 )  this.result = system_numeration.ONE;  else  this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusDN_EvenMinus extends Operator 
{
	MinusDN_EvenMinus ( )  { this.operation = Operation.minus_even_d_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "29", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "59", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusDN_NotEvenMinus extends Operator 
{
	MinusDN_NotEvenMinus ( )  { this.operation = Operation.minus_not_even_d_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "31", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "31", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "29", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯5", "59", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class MinusD_LessMinus_D extends Operator 
{
	MinusD_LessMinus_D ( )  { this.operation = new MinusLessMinus_D ( new D_Less_D ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_LessOrEvenMinus_D extends Operator 
{
	MinusD_LessOrEvenMinus_D ( )  { this.operation = new MinusLessMinus_D ( new D_LessOrEven_D ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( Operator.compareNumbersWithPointAndTenPow ( number_1, number_2, false, system_numeration ) == 0 )  this.result = system_numeration.ONE;  else  this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_MoreMinus_D extends Operator 
{
	MinusD_MoreMinus_D ( )  { this.operation = new MinusLessMinus_D ( new D_More_D ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_MoreOrEvenMinus_D extends Operator 
{
	MinusD_MoreOrEvenMinus_D ( )  { this.operation = new MinusLessMinus_D ( new D_MoreOrEven_D ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( Operator.compareNumbersWithPointAndTenPow ( number_1, number_2, false, system_numeration ) == 0 )  this.result = system_numeration.ONE;  else  this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_EvenMinus_D extends Operator 
{
	MinusD_EvenMinus_D ( )  { this.operation = Operation.minus_even_d_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_NotEvenMinus_D extends Operator 
{
	MinusD_NotEvenMinus_D ( )  { this.operation = Operation.minus_not_even_d_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class MinusD_LessMinus_DN extends Operator 
{
	MinusD_LessMinus_DN ( )  { this.operation = new MinusLessMinus_D ( new D_Less_DN ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "29¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "29¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "5900000¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "3100000000¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_LessOrEvenMinus_DN extends Operator 
{
	MinusD_LessOrEvenMinus_DN ( )  { this.operation = new MinusLessMinus_D ( new D_LessOrEven_DN ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( Operator.compareNumbersWithPointAndTenPow ( number_1, number_2, false, system_numeration ) == 0 )  this.result = system_numeration.ONE;  else  this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "29¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "29¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "5900000¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "3100000000¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_MoreMinus_DN extends Operator 
{
	MinusD_MoreMinus_DN ( )  { this.operation = new MinusLessMinus_D ( new D_More_DN ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "29¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "29¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "5900000¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "3100000000¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "310000000¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "31000000¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_MoreOrEvenMinus_DN extends Operator 
{
	MinusD_MoreOrEvenMinus_DN ( )  { this.operation = new MinusLessMinus_D ( new D_MoreOrEven_DN ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( Operator.compareNumbersWithPointAndTenPow ( number_1, number_2, false, system_numeration ) == 0 )  this.result = system_numeration.ONE;  else  this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "29¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "29¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "5900000¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "3100000000¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "310000000¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "31000000¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_EvenMinus_DN extends Operator 
{
	MinusD_EvenMinus_DN ( )  { this.operation = Operation.minus_even_d_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "29¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "29¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "5900000¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "3100000000¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "310000000¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusD_NotEvenMinus_DN extends Operator 
{
	MinusD_NotEvenMinus_DN ( )  { this.operation = Operation.minus_not_even_d_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "29¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°0", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "29¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°0", "59¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "29¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0°5", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "29¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "59¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "5900000¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°5", "31¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "3100000000¯5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31°2", "310000000¯5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class MinusDN_LessMinus_D extends Operator 
{
	MinusDN_LessMinus_D ( )  { this.operation = new MinusLessMinus_D ( new DN_Less_D ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
	{
		try
		{
			if (print_calling) this.makeResultExpression(number_1, number_2, print_calling);

			this.result = this.operation.arithmeticOperation(number_1, number_2, system_numeration, false);
			this.outputResult(print_calling);
			return this.result;
		}
		catch ( NullPointerException ex )  { throw new NullPointerException(Colors.RED + ex.getMessage() + "  " + new Throwable().getStackTrace()[0] + Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass().getName() + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR); }
	}

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "29°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "29°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "59°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "31°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "310000000¯2", "31°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31000000¯2", "31°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusDN_LessOrEvenMinus_D extends Operator 
{
	MinusDN_LessOrEvenMinus_D ( )  { this.operation = new MinusLessMinus_D ( new DN_LessOrEven_D ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( Operator.compareNumbersWithPointAndTenPow ( number_1, number_2, false, system_numeration ) == 0 )  this.result = system_numeration.ONE;  else  this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "29°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "29°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "59°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "31°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "310000000¯2", "31°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31000000¯2", "31°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusDN_MoreMinus_D extends Operator 
{
	MinusDN_MoreMinus_D ( )  { this.operation = new MinusLessMinus_D ( new DN_More_D ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "29°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "31°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "29°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "59°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "31°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusDN_MoreOrEvenMinus_D extends Operator 
{
	MinusDN_MoreOrEvenMinus_D ( )  { this.operation = new MinusLessMinus_D ( new DN_MoreOrEven_D ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( Operator.compareNumbersWithPointAndTenPow ( number_1, number_2, false, system_numeration ) == 0 )  this.result = system_numeration.ONE;  else  this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "29°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "31°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "29°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "59°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "31°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusDN_EvenMinus_D extends Operator 
{
	MinusDN_EvenMinus_D ( )  { this.operation = Operation.minus_even_d_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "29°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "29°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "31°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "29°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "59°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "31°5", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}

class MinusDN_NotEvenMinus_D extends Operator 
{
	MinusDN_NotEvenMinus_D ( )  { this.operation = Operation.minus_not_even_d_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "0°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯0", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯0", "59°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "29°0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "0¯5", "0°7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "29°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "59°7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "31°3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "29°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "3100000¯2", "59°3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
		try { if ( ! this.arithmeticOperation ( "31¯5", "31°5", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; } }  catch ( Exception ex )  { out.println ( ex.getMessage ( ) ); }
	}
}
// --------------------------------

class MinusDN_LessMinus_DN extends Operator 
{
	MinusDN_LessMinus_DN ( )  { this.operation = new MinusLessMinus_D ( new DN_Less_DN ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯0", "7¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯0", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯3", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯3", "5¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯7", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯3", "29¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯3", "29¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯7", "59¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
	}
}

class MinusDN_LessOrEvenMinus_DN extends Operator 
{
	MinusDN_LessOrEvenMinus_DN ( )  { this.operation = new MinusLessMinus_D ( new DN_LessOrEven_DN ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( Operator.compareNumbersWithPointAndTenPow ( number_1, number_2, false, system_numeration ) == 0 )  this.result = system_numeration.ONE;  else  this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯0", "7¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯0", "0¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯3", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯3", "5¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯7", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯3", "29¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯3", "29¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯7", "59¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
	}
}

class MinusDN_MoreMinus_DN extends Operator 
{
	MinusDN_MoreMinus_DN ( )  { this.operation = new MinusLessMinus_D ( new DN_More_DN ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }		
    }

	@Override
	public void testingClass ( )
	{
		if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯0", "7¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯0", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯3", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯3", "5¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯7", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯3", "29¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯3", "29¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯7", "59¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
	}
}

class MinusDN_MoreOrEvenMinus_DN extends Operator 
{
	MinusDN_MoreOrEvenMinus_DN ( )  { this.operation = new MinusLessMinus_D ( new DN_MoreOrEven_DN ( ) ); }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			if ( Operator.compareNumbersWithPointAndTenPow ( number_1, number_2, false, system_numeration ) == 0 )  this.result = system_numeration.ONE;  else  this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯0", "7¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯0", "0¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯3", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯3", "5¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯7", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯3", "29¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯3", "29¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯7", "59¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
	}
}

class MinusDN_EvenMinus_DN extends Operator 
{
	MinusDN_EvenMinus_DN ( )  { this.operation = Operation.minus_even_d_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯0", "7¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯0", "0¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯3", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯3", "5¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯7", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯3", "29¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯3", "29¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯7", "59¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
	}
}

class MinusDN_NotEvenMinus_DN extends Operator 
{
	MinusDN_NotEvenMinus_DN ( )  { this.operation = Operation.minus_not_even_d_minus; }

    @Override
    public String arithmeticOperation ( String number_1, String number_2, ArithmeticTable system_numeration,  boolean print_calling ) throws NullPointerException
    {
	  	try
		{
			if ( print_calling )  this.makeResultExpression ( number_1, number_2, print_calling );
			
			this.result = this.operation.arithmeticOperation ( number_1, number_2, system_numeration, false );
			this.outputResult ( print_calling );
			return this.result;			
		}
		catch ( NullPointerException ex )  { throw new NullPointerException ( Colors.RED + ex.getMessage ( ) + "  " + new Throwable ( ).getStackTrace ( ) [ 0 ]+ Colors.RED + "\nE X C E P T I O N -- When calling the function " + Colors.WHITE + "'" + this.getClass ( ).getName ( ) + " :: arithmeticOperation ( " + Colors.YELLOW + number_1 + ", " + number_2 + ", " + system_numeration + Colors.WHITE + " )'  " + Colors.NOCOLOR ); }
    }

	@Override
	public void testingClass ( )
	{
		if ( ! this.arithmeticOperation ( "0¯0", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯0", "0¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯5", "0¯0", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯0", "7¯0", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "0¯0", "0¯7", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯3", "5¯3", Operator.test_system, true ).equals ( "0" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯3", "5¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "5¯7", "5¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯3", "29¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯3", "29¯7", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
		if ( ! this.arithmeticOperation ( "31¯7", "59¯3", Operator.test_system, true ).equals ( "1" ) )  { out.println ( Colors.PURPURE + "The result is  W R O N G __ At the line - " + Colors.NOCOLOR + new Throwable ( ).getStackTrace ( ) [ 0 ] );  Operator.mistakes ++; }
	}
}
// --------------------------------